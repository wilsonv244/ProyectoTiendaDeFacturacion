import SelectorEngine from"../../../src/dom/selector-engine";import{getFixture,clearFixture}from"../../helpers/fixture";describe("SelectorEngine",()=>{let e;beforeAll(()=>{e=getFixture()}),afterEach(()=>{clearFixture()}),describe("find",()=>{it("should find elements",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");expect(SelectorEngine.find("div",e)).toEqual([t])}),it("should find elements globaly",()=>{e.innerHTML='<div id="test"></div>';const t=e.querySelector("#test");expect(SelectorEngine.find("#test")).toEqual([t])}),it("should handle :scope selectors",()=>{e.innerHTML='<ul>\n        <li></li>\n        <li>\n          <a href="#" class="active">link</a>\n        </li>\n        <li></li>\n      </ul>';const t=e.querySelector("ul"),n=e.querySelector(".active");expect(SelectorEngine.find(":scope > li > .active",t)).toEqual([n])})}),describe("findOne",()=>{it("should return one element",()=>{e.innerHTML='<div id="test"></div>';const t=e.querySelector("#test");expect(SelectorEngine.findOne("#test")).toEqual(t)})}),describe("children",()=>{it("should find children",()=>{e.innerHTML="<ul>\n        <li></li>\n        <li></li>\n        <li></li>\n      </ul>";const t=e.querySelector("ul"),n=[].concat(...e.querySelectorAll("li")),l=SelectorEngine.children(t,"li");expect(l).toEqual(n)})}),describe("parents",()=>{it("should return parents",()=>{expect(SelectorEngine.parents(e,"body").length).toEqual(1)})}),describe("prev",()=>{it("should return previous element",()=>{e.innerHTML='<div class="test"></div><button class="btn"></button>';const t=e.querySelector(".btn"),n=e.querySelector(".test");expect(SelectorEngine.prev(t,".test")).toEqual([n])}),it("should return previous element with an extra element between",()=>{e.innerHTML=['<div class="test"></div>',"<span></span>",'<button class="btn"></button>'].join("");const t=e.querySelector(".btn"),n=e.querySelector(".test");expect(SelectorEngine.prev(t,".test")).toEqual([n])}),it("should return previous element with comments or text nodes between",()=>{e.innerHTML=['<div class="test"></div>','<div class="test"></div>',"\x3c!-- Comment--\x3e","Text",'<button class="btn"></button>'].join("");const t=e.querySelector(".btn"),n=e.querySelectorAll(".test")[1];expect(SelectorEngine.prev(t,".test")).toEqual([n])})}),describe("next",()=>{it("should return next element",()=>{e.innerHTML='<div class="test"></div><button class="btn"></button>';const t=e.querySelector(".btn"),n=e.querySelector(".test");expect(SelectorEngine.next(n,".btn")).toEqual([t])}),it("should return next element with an extra element between",()=>{e.innerHTML=['<div class="test"></div>',"<span></span>",'<button class="btn"></button>'].join("");const t=e.querySelector(".btn"),n=e.querySelector(".test");expect(SelectorEngine.next(n,".btn")).toEqual([t])}),it("should return next element with comments or text nodes between",()=>{e.innerHTML=['<div class="test"></div>',"\x3c!-- Comment--\x3e","Text",'<button class="btn"></button>','<button class="btn"></button>'].join("");const t=e.querySelector(".btn"),n=e.querySelector(".test");expect(SelectorEngine.next(n,".btn")).toEqual([t])})}),describe("focusableChildren",()=>{it("should return only elements with specific tag names",()=>{e.innerHTML=["<div>lorem</div>","<span>lorem</span>","<a>lorem</a>","<button>lorem</button>","<input />","<textarea></textarea>","<select></select>","<details>lorem</details>"].join("");const t=[e.querySelector("a"),e.querySelector("button"),e.querySelector("input"),e.querySelector("textarea"),e.querySelector("select"),e.querySelector("details")];expect(SelectorEngine.focusableChildren(e)).toEqual(t)}),it("should return any element with non negative tab index",()=>{e.innerHTML=["<div tabindex>lorem</div>",'<div tabindex="0">lorem</div>','<div tabindex="10">lorem</div>'].join("");const t=[e.querySelector("[tabindex]"),e.querySelector('[tabindex="0"]'),e.querySelector('[tabindex="10"]')];expect(SelectorEngine.focusableChildren(e)).toEqual(t)}),it("should return not return elements with negative tab index",()=>{e.innerHTML=['<button tabindex="-1">lorem</button>'].join("");expect(SelectorEngine.focusableChildren(e)).toEqual([])}),it("should return contenteditable elements",()=>{e.innerHTML=['<div contenteditable="true">lorem</div>'].join("");const t=[e.querySelector('[contenteditable="true"]')];expect(SelectorEngine.focusableChildren(e)).toEqual(t)}),it("should not return disabled elements",()=>{e.innerHTML=['<button disabled="true">lorem</button>'].join("");expect(SelectorEngine.focusableChildren(e)).toEqual([])}),it("should not return invisible elements",()=>{e.innerHTML=['<button style="display:none;">lorem</button>'].join("");expect(SelectorEngine.focusableChildren(e)).toEqual([])})})});