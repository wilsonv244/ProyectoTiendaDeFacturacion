import EventHandler from"../../../src/dom/event-handler";import{getFixture,clearFixture}from"../../helpers/fixture";describe("EventHandler",()=>{let e;beforeAll(()=>{e=getFixture()}),afterEach(()=>{clearFixture()}),describe("on",()=>{it("should not add event listener if the event is not a string",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");EventHandler.on(t,null,()=>{}),EventHandler.on(null,"click",()=>{}),expect().nothing()}),it("should add event listener",t=>{e.innerHTML="<div></div>";const n=e.querySelector("div");EventHandler.on(n,"click",()=>{expect().nothing(),t()}),n.click()}),it("should add namespaced event listener",t=>{e.innerHTML="<div></div>";const n=e.querySelector("div");EventHandler.on(n,"bs.namespace",()=>{expect().nothing(),t()}),EventHandler.trigger(n,"bs.namespace")}),it("should add native namespaced event listener",t=>{e.innerHTML="<div></div>";const n=e.querySelector("div");EventHandler.on(n,"click.namespace",()=>{expect().nothing(),t()}),EventHandler.trigger(n,"click")}),it("should handle event delegation",t=>{EventHandler.on(document,"click",".test",()=>{expect().nothing(),t()}),e.innerHTML='<div class="test"></div>';e.querySelector("div").click()}),it("should handle mouseenter/mouseleave like the native counterpart",t=>{e.innerHTML=['<div class="outer">','<div class="inner">','<div class="nested">','<div class="deep"></div>',"</div>","</div>",'<div class="sibling"></div>',"</div>"];const n=e.querySelector(".outer"),r=e.querySelector(".inner"),o=e.querySelector(".nested"),l=e.querySelector(".deep"),a=e.querySelector(".sibling"),i=jasmine.createSpy("mouseenter"),c=jasmine.createSpy("mouseleave"),d=jasmine.createSpy("mouseenter"),s=jasmine.createSpy("mouseleave");EventHandler.on(r,"mouseenter",i),EventHandler.on(r,"mouseleave",c),EventHandler.on(n,"mouseenter",".inner",d),EventHandler.on(n,"mouseleave",".inner",s),EventHandler.on(a,"mouseenter",()=>{expect(i.calls.count()).toBe(2),expect(c.calls.count()).toBe(2),expect(d.calls.count()).toBe(2),expect(s.calls.count()).toBe(2),t()});const v=(e,t)=>{e.dispatchEvent(new MouseEvent("mouseout",{bubbles:!0,relatedTarget:t})),t.dispatchEvent(new MouseEvent("mouseover",{bubbles:!0,relatedTarget:e}))};v(n,r),v(r,o),v(o,l),v(l,o),v(o,r),v(r,n),setTimeout(()=>{expect(i.calls.count()).toBe(1),expect(c.calls.count()).toBe(1),expect(d.calls.count()).toBe(1),expect(s.calls.count()).toBe(1),v(n,r),v(r,a)},20)})}),describe("one",()=>{it("should call listener just once",t=>{e.innerHTML="<div></div>";let n=0;const r=e.querySelector("div"),o={oneListener(){n++}};EventHandler.one(r,"bootstrap",o.oneListener),EventHandler.trigger(r,"bootstrap"),EventHandler.trigger(r,"bootstrap"),setTimeout(()=>{expect(n).toEqual(1),t()},20)}),it("should call delegated listener just once",t=>{e.innerHTML="<div></div>";let n=0;const r=e.querySelector("div"),o={oneListener(){n++}};EventHandler.one(e,"bootstrap","div",o.oneListener),EventHandler.trigger(r,"bootstrap"),EventHandler.trigger(r,"bootstrap"),setTimeout(()=>{expect(n).toEqual(1),t()},20)})}),describe("off",()=>{it("should not remove a listener",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");EventHandler.off(t,null,()=>{}),EventHandler.off(null,"click",()=>{}),expect().nothing()}),it("should remove a listener",t=>{e.innerHTML="<div></div>";const n=e.querySelector("div");let r=0;const o=()=>{r++};EventHandler.on(n,"foobar",o),EventHandler.trigger(n,"foobar"),EventHandler.off(n,"foobar",o),EventHandler.trigger(n,"foobar"),setTimeout(()=>{expect(r).toEqual(1),t()},20)}),it("should remove all the events",t=>{e.innerHTML="<div></div>";const n=e.querySelector("div");let r=0;EventHandler.on(n,"foobar",()=>{r++}),EventHandler.on(n,"foobar",()=>{r++}),EventHandler.trigger(n,"foobar"),EventHandler.off(n,"foobar"),EventHandler.trigger(n,"foobar"),setTimeout(()=>{expect(r).toEqual(2),t()},20)}),it("should remove all the namespaced listeners if namespace is passed",t=>{e.innerHTML="<div></div>";const n=e.querySelector("div");let r=0;EventHandler.on(n,"foobar.namespace",()=>{r++}),EventHandler.on(n,"foofoo.namespace",()=>{r++}),EventHandler.trigger(n,"foobar.namespace"),EventHandler.trigger(n,"foofoo.namespace"),EventHandler.off(n,".namespace"),EventHandler.trigger(n,"foobar.namespace"),EventHandler.trigger(n,"foofoo.namespace"),setTimeout(()=>{expect(r).toEqual(2),t()},20)}),it("should remove the namespaced listeners",t=>{e.innerHTML="<div></div>";const n=e.querySelector("div");let r=0,o=0;EventHandler.on(n,"foobar.namespace",()=>{r++}),EventHandler.on(n,"foofoo.namespace",()=>{o++}),EventHandler.trigger(n,"foobar.namespace"),EventHandler.off(n,"foobar.namespace"),EventHandler.trigger(n,"foobar.namespace"),EventHandler.trigger(n,"foofoo.namespace"),setTimeout(()=>{expect(r).toEqual(1),expect(o).toEqual(1),t()},20)}),it("should remove the all the namespaced listeners for native events",t=>{e.innerHTML="<div></div>";const n=e.querySelector("div");let r=0;EventHandler.on(n,"click.namespace",()=>{r++}),EventHandler.on(n,"click.namespace2",()=>{r++}),EventHandler.trigger(n,"click"),EventHandler.off(n,"click"),EventHandler.trigger(n,"click"),setTimeout(()=>{expect(r).toEqual(2),t()},20)}),it("should remove the specified namespaced listeners for native events",t=>{e.innerHTML="<div></div>";const n=e.querySelector("div");let r=0,o=0;EventHandler.on(n,"click.namespace",()=>{r++}),EventHandler.on(n,"click.namespace2",()=>{o++}),EventHandler.trigger(n,"click"),EventHandler.off(n,"click.namespace"),EventHandler.trigger(n,"click"),setTimeout(()=>{expect(r).toEqual(1),expect(o).toEqual(2),t()},20)}),it("should remove a listener registered by .one",t=>{e.innerHTML="<div></div>";const n=e.querySelector("div"),r=()=>{throw new Error("called")};EventHandler.one(n,"foobar",r),EventHandler.off(n,"foobar",r),EventHandler.trigger(n,"foobar"),setTimeout(()=>{expect().nothing(),t()},20)}),it("should remove the correct delegated event listener",()=>{const t=document.createElement("div"),n=document.createElement("span");t.append(n);const r=document.createElement("a");t.append(r);let o=0;const l=()=>{o++};EventHandler.on(t,"click","a",l),EventHandler.on(t,"click","span",l),e.append(t),EventHandler.trigger(r,"click"),EventHandler.trigger(n,"click"),expect(o).toEqual(2),EventHandler.off(t,"click","span",l),EventHandler.trigger(n,"click"),expect(o).toEqual(2),EventHandler.trigger(r,"click"),expect(o).toEqual(3),EventHandler.on(t,"click","span",l),EventHandler.trigger(r,"click"),EventHandler.trigger(n,"click"),expect(o).toEqual(5),EventHandler.off(t,"click","span"),EventHandler.trigger(n,"click"),expect(o).toEqual(5)})})});