import Data from"../../../src/dom/data";import{getFixture,clearFixture}from"../../helpers/fixture";describe("Data",()=>{const t={test:"bsData"};let e,a;beforeAll(()=>{e=getFixture()}),beforeEach(()=>{e.innerHTML="<div></div>",a=e.querySelector("div")}),afterEach(()=>{Data.remove(a,"bs.test"),clearFixture()}),it("should return null for unknown elements",()=>{const e={...t};Data.set(a,"bs.test",e),expect(Data.get(null)).toBeNull(),expect(Data.get(void 0)).toBeNull(),expect(Data.get(document.createElement("div"),"bs.test")).toBeNull()}),it("should return null for unknown keys",()=>{const e={...t};Data.set(a,"bs.test",e),expect(Data.get(a,null)).toBeNull(),expect(Data.get(a,void 0)).toBeNull(),expect(Data.get(a,"bs.unknown")).toBeNull()}),it("should store data for an element with a given key and return it",()=>{const e={...t};Data.set(a,"bs.test",e),expect(Data.get(a,"bs.test")).toBe(e)}),it("should overwrite data if something is already stored",()=>{const e={...t},s={...e};Data.set(a,"bs.test",e),Data.set(a,"bs.test",s),expect(Data.get(a,"bs.test")).not.toBe(e),expect(Data.get(a,"bs.test")).toBe(s)}),it("should do nothing when an element have nothing stored",()=>{Data.remove(a,"bs.test"),expect().nothing()}),it("should remove nothing for an unknown key",()=>{const e={...t};Data.set(a,"bs.test",e),Data.remove(a,"bs.unknown"),expect(Data.get(a,"bs.test")).toBe(e)}),it("should remove data for a given key",()=>{const e={...t};Data.set(a,"bs.test",e),Data.remove(a,"bs.test"),expect(Data.get(a,"bs.test")).toBeNull()}),it("should console.error a message if called with multiple keys",()=>{console.error=jasmine.createSpy("console.error");const e={...t},s={...e};Data.set(a,"bs.test",e),Data.set(a,"bs.unknown",s),expect(console.error).toHaveBeenCalled(),expect(Data.get(a,"bs.unknown")).toBe(null)})});