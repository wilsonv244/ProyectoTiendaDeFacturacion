import Manipulator from"../../../src/dom/manipulator";import{getFixture,clearFixture}from"../../helpers/fixture";describe("Manipulator",()=>{let t;beforeAll(()=>{t=getFixture()}),afterEach(()=>{clearFixture()}),describe("setDataAttribute",()=>{it("should set data attribute prefixed with bs",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div");Manipulator.setDataAttribute(e,"key","value"),expect(e.getAttribute("data-bs-key")).toEqual("value")}),it("should set data attribute in kebab case",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div");Manipulator.setDataAttribute(e,"testKey","value"),expect(e.getAttribute("data-bs-test-key")).toEqual("value")})}),describe("removeDataAttribute",()=>{it("should only remove bs-prefixed data attribute",()=>{t.innerHTML='<div data-bs-key="value" data-key-bs="postfixed" data-key="value"></div>';const e=t.querySelector("div");Manipulator.removeDataAttribute(e,"key"),expect(e.getAttribute("data-bs-key")).toBeNull(),expect(e.getAttribute("data-key-bs")).toEqual("postfixed"),expect(e.getAttribute("data-key")).toEqual("value")}),it("should remove data attribute in kebab case",()=>{t.innerHTML='<div data-bs-test-key="value"></div>';const e=t.querySelector("div");Manipulator.removeDataAttribute(e,"testKey"),expect(e.getAttribute("data-bs-test-key")).toBeNull()})}),describe("getDataAttributes",()=>{it("should return an empty object for null",()=>{expect(Manipulator.getDataAttributes(null)).toEqual({}),expect().nothing()}),it("should get only bs-prefixed data attributes without bs namespace",()=>{t.innerHTML='<div data-bs-toggle="tabs" data-bs-target="#element" data-another="value" data-target-bs="#element" data-in-bs-out="in-between"></div>';const e=t.querySelector("div");expect(Manipulator.getDataAttributes(e)).toEqual({toggle:"tabs",target:"#element"})})}),describe("getDataAttribute",()=>{it("should only get bs-prefixed data attribute",()=>{t.innerHTML='<div data-bs-key="value" data-test-bs="postFixed" data-toggle="tab"></div>';const e=t.querySelector("div");expect(Manipulator.getDataAttribute(e,"key")).toEqual("value"),expect(Manipulator.getDataAttribute(e,"test")).toBeNull(),expect(Manipulator.getDataAttribute(e,"toggle")).toBeNull()}),it("should get data attribute in kebab case",()=>{t.innerHTML='<div data-bs-test-key="value" ></div>';const e=t.querySelector("div");expect(Manipulator.getDataAttribute(e,"testKey")).toEqual("value")}),it("should normalize data",()=>{t.innerHTML='<div data-bs-test="false" ></div>';const e=t.querySelector("div");expect(Manipulator.getDataAttribute(e,"test")).toEqual(!1),e.setAttribute("data-bs-test","true"),expect(Manipulator.getDataAttribute(e,"test")).toEqual(!0),e.setAttribute("data-bs-test","1"),expect(Manipulator.getDataAttribute(e,"test")).toEqual(1)})}),describe("offset",()=>{it("should return an object with two properties top and left, both numbers",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div"),a=Manipulator.offset(e);expect(a).toBeDefined(),expect(a.top).toEqual(jasmine.any(Number)),expect(a.left).toEqual(jasmine.any(Number))}),it("should return offset relative to attached element's offset",()=>{t.innerHTML='<div style="position:absolute;top:500px;left:1000px"></div>';const e=t.querySelector("div"),a=Manipulator.offset(e),i=Manipulator.offset(t);expect(a).toEqual({top:i.top+500,left:i.left+1e3})}),it("should not change offset when viewport is scrolled",e=>{t.innerHTML='<div style="position:absolute;top:500px;left:1000px"></div>';const a=t.querySelector("div"),i=Manipulator.offset(a),{defaultView:o,body:r}=t.ownerDocument,u=document.createElement("div");u.style.cssText="position:absolute;top:5000px;left:5000px;width:1px;height:1px",r.append(u);const l=()=>{expect(window.pageYOffset).toBe(200),expect(window.pageXOffset).toBe(400);const t=Manipulator.offset(a);expect(t).toEqual({top:i.top,left:i.left}),o.removeEventListener("scroll",l),u.remove(),o.scrollTo(0,0),e()};o.addEventListener("scroll",l),o.scrollTo(400,200)})}),describe("position",()=>{it("should return an object with two properties top and left, both numbers",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div"),a=Manipulator.position(e);expect(a).toBeDefined(),expect(a.top).toEqual(jasmine.any(Number)),expect(a.left).toEqual(jasmine.any(Number))})})});