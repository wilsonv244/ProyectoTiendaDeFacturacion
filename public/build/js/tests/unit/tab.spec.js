import Tab from"../../src/tab";import{getFixture,clearFixture,jQueryMock}from"../helpers/fixture";describe("Tab",()=>{let t;beforeAll(()=>{t=getFixture()}),afterEach(()=>{clearFixture()}),describe("VERSION",()=>{it("should return plugin version",()=>{expect(Tab.VERSION).toEqual(jasmine.any(String))})}),describe("constructor",()=>{it("should take care of element either passed as a CSS selector or DOM element",()=>{t.innerHTML=['<ul class="nav"><li><a href="#home" role="tab">Home</a></li></ul>','<ul><li id="home"></li></ul>'].join("");const e=t.querySelector('[href="#home"]'),a=new Tab('[href="#home"]'),o=new Tab(e);expect(a._element).toEqual(e),expect(o._element).toEqual(e)})}),describe("show",()=>{it("should activate element by tab id (using buttons, the preferred semantic way)",e=>{t.innerHTML=['<ul class="nav" role="tablist">','  <li><button type="button" data-bs-target="#home" role="tab">Home</button></li>','  <li><button type="button" id="triggerProfile" data-bs-target="#profile" role="tab">Profile</button></li>',"</ul>","<ul>",'  <li id="home" role="tabpanel"></li>','  <li id="profile" role="tabpanel"></li>',"</ul>"].join("");const a=t.querySelector("#triggerProfile"),o=new Tab(a);a.addEventListener("shown.bs.tab",()=>{expect(t.querySelector("#profile").classList.contains("active")).toEqual(!0),expect(a.getAttribute("aria-selected")).toEqual("true"),e()}),o.show()}),it("should activate element by tab id (using links for tabs - not ideal, but still supported)",e=>{t.innerHTML=['<ul class="nav" role="tablist">','  <li><a href="#home" role="tab">Home</a></li>','  <li><a id="triggerProfile" href="#profile" role="tab">Profile</a></li>',"</ul>","<ul>",'  <li id="home" role="tabpanel"></li>','  <li id="profile" role="tabpanel"></li>',"</ul>"].join("");const a=t.querySelector("#triggerProfile"),o=new Tab(a);a.addEventListener("shown.bs.tab",()=>{expect(t.querySelector("#profile").classList.contains("active")).toEqual(!0),expect(a.getAttribute("aria-selected")).toEqual("true"),e()}),o.show()}),it("should activate element by tab id in ordered list",e=>{t.innerHTML=['<ol class="nav nav-pills">','  <li><button type="button" data-bs-target="#home" role="tab">Home</button></li>','  <li><button type="button" id="triggerProfile" href="#profile" role="tab">Profile</button></li>',"</ol>","<ol>",'  <li id="home" role="tabpanel"></li>','  <li id="profile" role="tabpanel"></li>',"</ol>"].join("");const a=t.querySelector("#triggerProfile"),o=new Tab(a);a.addEventListener("shown.bs.tab",()=>{expect(t.querySelector("#profile").classList.contains("active")).toEqual(!0),e()}),o.show()}),it("should activate element by tab id in nav list",e=>{t.innerHTML=['<nav class="nav">','  <button type="button" data-bs-target="#home" role="tab">Home</button>','  <button type="button" id="triggerProfile" data-bs-target="#profile" role="tab">Profile</a>',"</nav>",'<div><div id="home" role="tabpanel"></div><div id="profile" role="tabpanel"></div></div>'].join("");const a=t.querySelector("#triggerProfile"),o=new Tab(a);a.addEventListener("shown.bs.tab",()=>{expect(t.querySelector("#profile").classList.contains("active")).toEqual(!0),e()}),o.show()}),it("should activate element by tab id in list group",e=>{t.innerHTML=['<div class="list-group" role="tablist">','  <button type="button" data-bs-target="#home" role="tab">Home</button>','  <button type="button" id="triggerProfile" data-bs-target="#profile" role="tab">Profile</button>',"</div>",'<div><div id="home" role="tabpanel"></div><div id="profile" role="tabpanel"></div></div>'].join("");const a=t.querySelector("#triggerProfile"),o=new Tab(a);a.addEventListener("shown.bs.tab",()=>{expect(t.querySelector("#profile").classList.contains("active")).toEqual(!0),e()}),o.show()}),it("should not fire shown when show is prevented",e=>{t.innerHTML='<div class="nav"></div>';const a=t.querySelector("div"),o=new Tab(a);a.addEventListener("show.bs.tab",t=>{t.preventDefault(),setTimeout(()=>{expect().nothing(),e()},30)}),a.addEventListener("shown.bs.tab",()=>{throw new Error("should not trigger shown event")}),o.show()}),it("should not fire shown when tab is already active",e=>{t.innerHTML=['<ul class="nav nav-tabs" role="tablist">','  <li class="nav-item" role="presentation"><button type="button" data-bs-target="#home" class="nav-link active" role="tab" aria-selected="true">Home</button></li>','  <li class="nav-item" role="presentation"><button type="button" data-bs-target="#profile" class="nav-link" role="tab">Profile</button></li>',"</ul>",'<div class="tab-content">','  <div class="tab-pane active" id="home" role="tabpanel"></div>','  <div class="tab-pane" id="profile" role="tabpanel"></div>',"</div>"].join("");const a=t.querySelector("button.active"),o=new Tab(a);a.addEventListener("shown.bs.tab",()=>{throw new Error("should not trigger shown event")}),o.show(),setTimeout(()=>{expect().nothing(),e()},30)}),it("show and shown events should reference correct relatedTarget",e=>{t.innerHTML=['<ul class="nav nav-tabs" role="tablist">','  <li class="nav-item" role="presentation"><button type="button" data-bs-target="#home" class="nav-link active" role="tab" aria-selected="true">Home</button></li>','  <li class="nav-item" role="presentation"><button type="button" id="triggerProfile" data-bs-target="#profile" class="nav-link" role="tab">Profile</button></li>',"</ul>",'<div class="tab-content">','  <div class="tab-pane active" id="home" role="tabpanel"></div>','  <div class="tab-pane" id="profile" role="tabpanel"></div>',"</div>"].join("");const a=t.querySelector("#triggerProfile"),o=new Tab(a);a.addEventListener("show.bs.tab",t=>{expect(t.relatedTarget.getAttribute("data-bs-target")).toEqual("#home")}),a.addEventListener("shown.bs.tab",o=>{expect(o.relatedTarget.getAttribute("data-bs-target")).toEqual("#home"),expect(a.getAttribute("aria-selected")).toEqual("true"),expect(t.querySelector("button:not(.active)").getAttribute("aria-selected")).toEqual("false"),e()}),o.show()}),it("should fire hide and hidden events",e=>{t.innerHTML=['<ul class="nav" role="tablist">','  <li><button type="button" data-bs-target="#home" role="tab">Home</button></li>','  <li><button type="button" data-bs-target="#profile">Profile</button></li>',"</ul>"].join("");const a=t.querySelectorAll("button"),o=new Tab(a[0]),n=new Tab(a[1]);let l=!1;a[0].addEventListener("shown.bs.tab",()=>{n.show()}),a[0].addEventListener("hide.bs.tab",t=>{l=!0,expect(t.relatedTarget.getAttribute("data-bs-target")).toEqual("#profile")}),a[0].addEventListener("hidden.bs.tab",t=>{expect(l).toEqual(!0),expect(t.relatedTarget.getAttribute("data-bs-target")).toEqual("#profile"),e()}),o.show()}),it("should not fire hidden when hide is prevented",e=>{t.innerHTML=['<ul class="nav" role="tablist">','  <li><button type="button" data-bs-target="#home" role="tab">Home</button></li>','  <li><button type="button" data-bs-target="#profile" role="tab">Profile</button></li>',"</ul>"].join("");const a=t.querySelectorAll("button"),o=new Tab(a[0]),n=new Tab(a[1]);a[0].addEventListener("shown.bs.tab",()=>{n.show()}),a[0].addEventListener("hide.bs.tab",t=>{t.preventDefault(),setTimeout(()=>{expect().nothing(),e()},30)}),a[0].addEventListener("hidden.bs.tab",()=>{throw new Error("should not trigger hidden")}),o.show()}),it("should handle removed tabs",e=>{t.innerHTML=['<ul class="nav nav-tabs" role="tablist">','  <li class="nav-item" role="presentation">','    <a class="nav-link nav-tab" href="#profile" role="tab" data-bs-toggle="tab">','      <button class="btn-close" aria-label="Close"></button>',"    </a>","  </li>",'  <li class="nav-item" role="presentation">','    <a id="secondNav" class="nav-link nav-tab" href="#buzz" role="tab" data-bs-toggle="tab">','      <button class="btn-close" aria-label="Close"></button>',"    </a>","  </li>",'  <li class="nav-item" role="presentation">','    <a class="nav-link nav-tab" href="#references" role="tab" data-bs-toggle="tab">','      <button id="btnClose" class="btn-close" aria-label="Close"></button>',"    </a>","  </li>","</ul>",'<div class="tab-content">','  <div role="tabpanel" class="tab-pane fade show active" id="profile">test 1</div>','  <div role="tabpanel" class="tab-pane fade" id="buzz">test 2</div>','  <div role="tabpanel" class="tab-pane fade" id="references">test 3</div>',"</div>"].join("");const a=t.querySelector("#secondNav"),o=t.querySelector("#btnClose"),n=new Tab(a);a.addEventListener("shown.bs.tab",()=>{expect(t.querySelectorAll(".nav-tab").length).toEqual(2),e()}),o.addEventListener("click",()=>{const e=o.parentNode,a=e.parentNode,l=e.getAttribute("href"),i=t.querySelector(l);a.remove(),i.remove(),n.show()}),o.click()})}),describe("dispose",()=>{it("should dispose a tab",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div"),a=new Tab(t.querySelector("div"));expect(Tab.getInstance(e)).not.toBeNull(),a.dispose(),expect(Tab.getInstance(e)).toBeNull()})}),describe("jQueryInterface",()=>{it("should create a tab",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div");jQueryMock.fn.tab=Tab.jQueryInterface,jQueryMock.elements=[e],jQueryMock.fn.tab.call(jQueryMock),expect(Tab.getInstance(e)).not.toBeNull()}),it("should not re create a tab",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div"),a=new Tab(e);jQueryMock.fn.tab=Tab.jQueryInterface,jQueryMock.elements=[e],jQueryMock.fn.tab.call(jQueryMock),expect(Tab.getInstance(e)).toEqual(a)}),it("should call a tab method",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div"),a=new Tab(e);spyOn(a,"show"),jQueryMock.fn.tab=Tab.jQueryInterface,jQueryMock.elements=[e],jQueryMock.fn.tab.call(jQueryMock,"show"),expect(Tab.getInstance(e)).toEqual(a),expect(a.show).toHaveBeenCalled()}),it("should throw error on undefined method",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div");jQueryMock.fn.tab=Tab.jQueryInterface,jQueryMock.elements=[e],expect(()=>{jQueryMock.fn.tab.call(jQueryMock,"undefinedMethod")}).toThrowError(TypeError,'No method named "undefinedMethod"')})}),describe("getInstance",()=>{it("should return null if there is no instance",()=>{expect(Tab.getInstance(t)).toEqual(null)}),it("should return this instance",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div"),a=new Tab(e);expect(Tab.getInstance(e)).toEqual(a),expect(Tab.getInstance(e)).toBeInstanceOf(Tab)})}),describe("getOrCreateInstance",()=>{it("should return tab instance",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div"),a=new Tab(e);expect(Tab.getOrCreateInstance(e)).toEqual(a),expect(Tab.getInstance(e)).toEqual(Tab.getOrCreateInstance(e,{})),expect(Tab.getOrCreateInstance(e)).toBeInstanceOf(Tab)}),it("should return new instance when there is no tab instance",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div");expect(Tab.getInstance(e)).toEqual(null),expect(Tab.getOrCreateInstance(e)).toBeInstanceOf(Tab)})}),describe("data-api",()=>{it("should create dynamically a tab",e=>{t.innerHTML=['<ul class="nav nav-tabs" role="tablist">','  <li class="nav-item" role="presentation"><button type="button" data-bs-target="#home" class="nav-link active" role="tab" aria-selected="true">Home</button></li>','  <li class="nav-item" role="presentation"><button type="button" id="triggerProfile" data-bs-toggle="tab" data-bs-target="#profile" class="nav-link" role="tab">Profile</button></li>',"</ul>",'<div class="tab-content">','  <div class="tab-pane active" id="home" role="tabpanel"></div>','  <div class="tab-pane" id="profile" role="tabpanel"></div>',"</div>"].join("");const a=t.querySelector("#triggerProfile");a.addEventListener("shown.bs.tab",()=>{expect(a.classList.contains("active")).toEqual(!0),expect(t.querySelector("#profile").classList.contains("active")).toEqual(!0),e()}),a.click()}),it("selected tab should deactivate previous selected link in dropdown",()=>{t.innerHTML=['<ul class="nav nav-tabs">','  <li class="nav-item"><a class="nav-link" href="#home" data-bs-toggle="tab">Home</a></li>','  <li class="nav-item"><a class="nav-link" href="#profile" data-bs-toggle="tab">Profile</a></li>','  <li class="nav-item dropdown">','    <a class="nav-link dropdown-toggle active" data-bs-toggle="dropdown" href="#">Dropdown</a>','    <div class="dropdown-menu">','      <a class="dropdown-item active" href="#dropdown1" id="dropdown1-tab" data-bs-toggle="tab">@fat</a>','      <a class="dropdown-item" href="#dropdown2" id="dropdown2-tab" data-bs-toggle="tab">@mdo</a>',"    </div>","  </li>","</ul>"].join("");const e=t.querySelector("li:first-child a");e.click(),expect(e.classList.contains("active")).toEqual(!0),expect(t.querySelector("li:last-child a").classList.contains("active")).toEqual(!1),expect(t.querySelector("li:last-child .dropdown-menu a:first-child").classList.contains("active")).toEqual(!1)}),it("selecting a dropdown tab does not activate another",()=>{const e=['<ul class="nav nav-tabs" id="nav1">','  <li class="nav-item active"><a class="nav-link" href="#home" data-bs-toggle="tab">Home</a></li>','  <li class="nav-item dropdown">','    <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#">Dropdown</a>','    <div class="dropdown-menu">','      <a class="dropdown-item" href="#dropdown1" id="dropdown1-tab" data-bs-toggle="tab">@fat</a>',"    </div>","  </li>","</ul>"].join(""),a=['<ul class="nav nav-tabs" id="nav2">','  <li class="nav-item active"><a class="nav-link" href="#home" data-bs-toggle="tab">Home</a></li>','  <li class="nav-item dropdown">','    <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#">Dropdown</a>','    <div class="dropdown-menu">','      <a class="dropdown-item" href="#dropdown1" id="dropdown1-tab" data-bs-toggle="tab">@fat</a>',"    </div>","  </li>","</ul>"].join("");t.innerHTML=e+a;const o=t.querySelector("#nav1 .dropdown-item");o.click(),expect(o.classList.contains("active")).toEqual(!0),expect(t.querySelector("#nav1 .dropdown-toggle").classList.contains("active")).toEqual(!0),expect(t.querySelector("#nav2 .dropdown-toggle").classList.contains("active")).toEqual(!1),expect(t.querySelector("#nav2 .dropdown-item").classList.contains("active")).toEqual(!1)}),it("should support li > .dropdown-item",()=>{t.innerHTML=['<ul class="nav nav-tabs">','  <li class="nav-item"><a class="nav-link active" href="#home" data-bs-toggle="tab">Home</a></li>','  <li class="nav-item"><a class="nav-link" href="#profile" data-bs-toggle="tab">Profile</a></li>','  <li class="nav-item dropdown">','    <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#">Dropdown</a>','    <ul class="dropdown-menu">','      <li><a class="dropdown-item" href="#dropdown1" id="dropdown1-tab" data-bs-toggle="tab">@fat</a></li>','      <li><a class="dropdown-item" href="#dropdown2" id="dropdown2-tab" data-bs-toggle="tab">@mdo</a></li>',"    </ul>","  </li>","</ul>"].join("");const e=t.querySelector(".dropdown-item");e.click(),expect(e.classList.contains("active")).toEqual(!0),expect(t.querySelector(".nav-link").classList.contains("active")).toEqual(!1)}),it("should handle nested tabs",e=>{t.innerHTML=['<nav class="nav nav-tabs" role="tablist">','  <button type="button" id="tab1" data-bs-target="#x-tab1" class="nav-link" data-bs-toggle="tab" role="tab" aria-controls="x-tab1">Tab 1</button>','  <button type="button" data-bs-target="#x-tab2" class="nav-link active" data-bs-toggle="tab" role="tab" aria-controls="x-tab2" aria-selected="true">Tab 2</button>','  <button type="button" data-bs-target="#x-tab3" class="nav-link" data-bs-toggle="tab" role="tab" aria-controls="x-tab3">Tab 3</button>',"</nav>",'<div class="tab-content">','  <div class="tab-pane" id="x-tab1" role="tabpanel">','    <nav class="nav nav-tabs" role="tablist">','      <button type="button" data-bs-target="#nested-tab1" class="nav-link active" data-bs-toggle="tab" role="tab" aria-controls="x-tab1" aria-selected="true">Nested Tab 1</button>','      <button type="button" id="tabNested2" data-bs-target="#nested-tab2" class="nav-link" data-bs-toggle="tab" role="tab" aria-controls="x-profile">Nested Tab2</button>',"    </nav>",'    <div class="tab-content">','      <div class="tab-pane active" id="nested-tab1" role="tabpanel">Nested Tab1 Content</div>','      <div class="tab-pane" id="nested-tab2" role="tabpanel">Nested Tab2 Content</div>',"    </div>","  </div>",'  <div class="tab-pane active" id="x-tab2" role="tabpanel">Tab2 Content</div>','  <div class="tab-pane" id="x-tab3" role="tabpanel">Tab3 Content</div>',"</div>"].join("");const a=t.querySelector("#tab1"),o=t.querySelector("#tabNested2"),n=t.querySelector("#x-tab1");o.addEventListener("shown.bs.tab",()=>{expect(n.classList.contains("active")).toEqual(!0),e()}),a.addEventListener("shown.bs.tab",()=>{expect(n.classList.contains("active")).toEqual(!0),o.click()}),a.click()}),it("should not remove fade class if no active pane is present",e=>{t.innerHTML=['<ul class="nav nav-tabs" role="tablist">','  <li class="nav-item" role="presentation"><button type="button" id="tab-home" data-bs-target="#home" class="nav-link" data-bs-toggle="tab" role="tab">Home</button></li>','  <li class="nav-item" role="presentation"><button type="button" id="tab-profile" data-bs-target="#profile" class="nav-link" data-bs-toggle="tab" role="tab">Profile</button></li>',"</ul>",'<div class="tab-content">','  <div class="tab-pane fade" id="home" role="tabpanel"></div>','  <div class="tab-pane fade" id="profile" role="tabpanel"></div>',"</div>"].join("");const a=t.querySelector("#tab-profile"),o=t.querySelector("#tab-home"),n=t.querySelector("#profile"),l=t.querySelector("#home");a.addEventListener("shown.bs.tab",()=>{expect(n.classList.contains("fade")).toEqual(!0),expect(n.classList.contains("show")).toEqual(!0),o.addEventListener("shown.bs.tab",()=>{expect(n.classList.contains("fade")).toEqual(!0),expect(n.classList.contains("show")).toEqual(!1),expect(l.classList.contains("fade")).toEqual(!0),expect(l.classList.contains("show")).toEqual(!0),e()}),o.click()}),a.click()}),it("should not add show class to tab panes if there is no `.fade` class",e=>{t.innerHTML=['<ul class="nav nav-tabs" role="tablist">','  <li class="nav-item" role="presentation">','    <button type="button" class="nav-link nav-tab" data-bs-target="#home" role="tab" data-bs-toggle="tab">Home</button>',"  </li>",'  <li class="nav-item" role="presentation">','    <button type="button" id="secondNav" class="nav-link nav-tab" data-bs-target="#profile" role="tab" data-bs-toggle="tab">Profile</button>',"  </li>","</ul>",'<div class="tab-content">','  <div role="tabpanel" class="tab-pane" id="home">test 1</div>','  <div role="tabpanel" class="tab-pane" id="profile">test 2</div>',"</div>"].join("");const a=t.querySelector("#secondNav");a.addEventListener("shown.bs.tab",()=>{expect(t.querySelectorAll(".show").length).toEqual(0),e()}),a.click()}),it("should add show class to tab panes if there is a `.fade` class",e=>{t.innerHTML=['<ul class="nav nav-tabs" role="tablist">','  <li class="nav-item" role="presentation">','    <button type="button" class="nav-link nav-tab" data-bs-target="#home" role="tab" data-bs-toggle="tab">Home</button>',"  </li>",'  <li class="nav-item" role="presentation">','    <button type="button" id="secondNav" class="nav-link nav-tab" data-bs-target="#profile" role="tab" data-bs-toggle="tab">Profile</button>',"  </li>","</ul>",'<div class="tab-content">','  <div role="tabpanel" class="tab-pane fade" id="home">test 1</div>','  <div role="tabpanel" class="tab-pane fade" id="profile">test 2</div>',"</div>"].join("");const a=t.querySelector("#secondNav");a.addEventListener("shown.bs.tab",()=>{expect(t.querySelectorAll(".show").length).toEqual(1),e()}),a.click()}),it("should prevent default when the trigger is <a> or <area>",e=>{t.innerHTML=['<ul class="nav" role="tablist">','  <li><a type="button" href="#test"  class="active" role="tab" data-bs-toggle="tab">Home</a></li>','  <li><a type="button" href="#test2" role="tab" data-bs-toggle="tab">Home</a></li>',"</ul>"].join("");const a=t.querySelector('[href="#test2"]');spyOn(Event.prototype,"preventDefault").and.callThrough(),a.addEventListener("shown.bs.tab",()=>{expect(a.classList.contains("active")).toEqual(!0),expect(Event.prototype.preventDefault).toHaveBeenCalled(),e()}),a.click()}),it("should not fire shown when tab has disabled attribute",e=>{t.innerHTML=['<ul class="nav nav-tabs" role="tablist">','  <li class="nav-item" role="presentation"><button type="button" data-bs-target="#home" class="nav-link active" role="tab" aria-selected="true">Home</button></li>','  <li class="nav-item" role="presentation"><button type="button" data-bs-target="#profile" class="nav-link" disabled role="tab">Profile</button></li>',"</ul>",'<div class="tab-content">','  <div class="tab-pane active" id="home" role="tabpanel"></div>','  <div class="tab-pane" id="profile" role="tabpanel"></div>',"</div>"].join("");const a=t.querySelector("button[disabled]");a.addEventListener("shown.bs.tab",()=>{throw new Error("should not trigger shown event")}),a.click(),setTimeout(()=>{expect().nothing(),e()},30)}),it("should not fire shown when tab has disabled class",e=>{t.innerHTML=['<ul class="nav nav-tabs" role="tablist">','  <li class="nav-item" role="presentation"><a href="#home" class="nav-link active" role="tab" aria-selected="true">Home</a></li>','  <li class="nav-item" role="presentation"><a href="#profile" class="nav-link disabled" role="tab">Profile</a></li>',"</ul>",'<div class="tab-content">','  <div class="tab-pane active" id="home" role="tabpanel"></div>','  <div class="tab-pane" id="profile" role="tabpanel"></div>',"</div>"].join("");const a=t.querySelector("a.disabled");a.addEventListener("shown.bs.tab",()=>{throw new Error("should not trigger shown event")}),a.click(),setTimeout(()=>{expect().nothing(),e()},30)})})});