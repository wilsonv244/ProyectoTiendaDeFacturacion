import Button from"../../src/button";import{getFixture,clearFixture,jQueryMock}from"../helpers/fixture";describe("Button",()=>{let t;beforeAll(()=>{t=getFixture()}),afterEach(()=>{clearFixture()}),it("should take care of element either passed as a CSS selector or DOM element",()=>{t.innerHTML='<button data-bs-toggle="button">Placeholder</button>';const e=t.querySelector('[data-bs-toggle="button"]'),n=new Button('[data-bs-toggle="button"]'),o=new Button(e);expect(n._element).toEqual(e),expect(o._element).toEqual(e)}),describe("VERSION",()=>{it("should return plugin version",()=>{expect(Button.VERSION).toEqual(jasmine.any(String))})}),describe("DATA_KEY",()=>{it("should return plugin data key",()=>{expect(Button.DATA_KEY).toEqual("bs.button")})}),describe("data-api",()=>{it("should toggle active class on click",()=>{t.innerHTML=['<button class="btn" data-bs-toggle="button">btn</button>','<button class="btn testParent" data-bs-toggle="button"><div class="test"></div></button>'].join("");const e=t.querySelector(".btn"),n=t.querySelector(".test"),o=t.querySelector(".testParent");expect(e.classList.contains("active")).toEqual(!1),e.click(),expect(e.classList.contains("active")).toEqual(!0),e.click(),expect(e.classList.contains("active")).toEqual(!1),n.click(),expect(o.classList.contains("active")).toEqual(!0)})}),describe("toggle",()=>{it("should toggle aria-pressed",()=>{t.innerHTML='<button class="btn" data-bs-toggle="button" aria-pressed="false"></button>';const e=t.querySelector(".btn"),n=new Button(e);expect(e.getAttribute("aria-pressed")).toEqual("false"),expect(e.classList.contains("active")).toEqual(!1),n.toggle(),expect(e.getAttribute("aria-pressed")).toEqual("true"),expect(e.classList.contains("active")).toEqual(!0)})}),describe("dispose",()=>{it("should dispose a button",()=>{t.innerHTML='<button class="btn" data-bs-toggle="button"></button>';const e=t.querySelector(".btn"),n=new Button(e);expect(Button.getInstance(e)).not.toBeNull(),n.dispose(),expect(Button.getInstance(e)).toBeNull()})}),describe("jQueryInterface",()=>{it("should handle config passed and toggle existing button",()=>{t.innerHTML='<button class="btn" data-bs-toggle="button"></button>';const e=t.querySelector(".btn"),n=new Button(e);spyOn(n,"toggle"),jQueryMock.fn.button=Button.jQueryInterface,jQueryMock.elements=[e],jQueryMock.fn.button.call(jQueryMock,"toggle"),expect(n.toggle).toHaveBeenCalled()}),it("should create new button instance and call toggle",()=>{t.innerHTML='<button class="btn" data-bs-toggle="button"></button>';const e=t.querySelector(".btn");jQueryMock.fn.button=Button.jQueryInterface,jQueryMock.elements=[e],jQueryMock.fn.button.call(jQueryMock,"toggle"),expect(Button.getInstance(e)).not.toBeNull(),expect(e.classList.contains("active")).toEqual(!0)}),it("should just create a button instance without calling toggle",()=>{t.innerHTML='<button class="btn" data-bs-toggle="button"></button>';const e=t.querySelector(".btn");jQueryMock.fn.button=Button.jQueryInterface,jQueryMock.elements=[e],jQueryMock.fn.button.call(jQueryMock),expect(Button.getInstance(e)).not.toBeNull(),expect(e.classList.contains("active")).toEqual(!1)})}),describe("getInstance",()=>{it("should return button instance",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div"),n=new Button(e);expect(Button.getInstance(e)).toEqual(n),expect(Button.getInstance(e)).toBeInstanceOf(Button)}),it("should return null when there is no button instance",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div");expect(Button.getInstance(e)).toEqual(null)})}),describe("getOrCreateInstance",()=>{it("should return button instance",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div"),n=new Button(e);expect(Button.getOrCreateInstance(e)).toEqual(n),expect(Button.getInstance(e)).toEqual(Button.getOrCreateInstance(e,{})),expect(Button.getOrCreateInstance(e)).toBeInstanceOf(Button)}),it("should return new instance when there is no button instance",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div");expect(Button.getInstance(e)).toEqual(null),expect(Button.getOrCreateInstance(e)).toBeInstanceOf(Button)})})});