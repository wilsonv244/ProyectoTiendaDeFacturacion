import Dropdown from"../../src/dropdown";import EventHandler from"../../src/dom/event-handler";import{noop}from"../../src/util";import{clearFixture,createEvent,getFixture,jQueryMock}from"../helpers/fixture";describe("Dropdown",()=>{let e;beforeAll(()=>{e=getFixture()}),afterEach(()=>{clearFixture()}),describe("VERSION",()=>{it("should return plugin version",()=>{expect(Dropdown.VERSION).toEqual(jasmine.any(String))})}),describe("Default",()=>{it("should return plugin default config",()=>{expect(Dropdown.Default).toEqual(jasmine.any(Object))})}),describe("DefaultType",()=>{it("should return plugin default type config",()=>{expect(Dropdown.DefaultType).toEqual(jasmine.any(Object))})}),describe("DATA_KEY",()=>{it("should return plugin data key",()=>{expect(Dropdown.DATA_KEY).toEqual("bs.dropdown")})}),describe("constructor",()=>{it("should take care of element either passed as a CSS selector or DOM element",()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=new Dropdown('[data-bs-toggle="dropdown"]'),n=new Dropdown(o);expect(t._element).toEqual(o),expect(n._element).toEqual(o)}),it("should create offset modifier correctly when offset option is a function",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=jasmine.createSpy("getOffset").and.returnValue([10,20]),n=e.querySelector('[data-bs-toggle="dropdown"]'),d=new Dropdown(n,{offset:t,popperConfig:{onFirstUpdate:e=>{expect(t).toHaveBeenCalledWith({popper:e.rects.popper,reference:e.rects.reference,placement:e.placement},n),o()}}}),s=d._getOffset();expect(typeof s).toEqual("function"),d.show()}),it("should create offset modifier correctly when offset option is a string into data attribute",()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" data-bs-offset="10,20">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=new Dropdown(o);expect(t._getOffset()).toEqual([10,20])}),it("should allow to pass config to Popper with `popperConfig`",()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=new Dropdown(o,{popperConfig:{placement:"left"}})._getPopperConfig();expect(t.placement).toEqual("left")}),it("should allow to pass config to Popper with `popperConfig` as a function",()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" data-bs-placement="right" >Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=jasmine.createSpy("getPopperConfig").and.returnValue({placement:"left"}),n=new Dropdown(o,{popperConfig:t})._getPopperConfig();expect(t).toHaveBeenCalled(),expect(n.placement).toEqual("left")})}),describe("toggle",()=>{it("should toggle a dropdown",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("shown.bs.dropdown",()=>{expect(t.classList.contains("show")).toEqual(!0),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()}),n.toggle()}),it("should destroy old popper references on toggle",o=>{e.innerHTML=['<div class="first dropdown">','  <button class="firstBtn btn" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>",'<div class="second dropdown">','  <button class="secondBtn btn" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector(".firstBtn"),n=e.querySelector(".secondBtn"),d=e.querySelector(".first"),s=e.querySelector(".second"),r=new Dropdown(t);d.addEventListener("shown.bs.dropdown",()=>{expect(t.classList.contains("show")).toEqual(!0),spyOn(r._popper,"destroy"),n.click()}),s.addEventListener("shown.bs.dropdown",()=>setTimeout(()=>{expect(r._popper.destroy).toHaveBeenCalled(),o()})),r.toggle()}),it("should toggle a dropdown and add/remove event listener on mobile",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=document.documentElement.ontouchstart,n=e.querySelector('[data-bs-toggle="dropdown"]'),d=new Dropdown(n);document.documentElement.ontouchstart=()=>{},spyOn(EventHandler,"on"),spyOn(EventHandler,"off"),n.addEventListener("shown.bs.dropdown",()=>{expect(n.classList.contains("show")).toEqual(!0),expect(n.getAttribute("aria-expanded")).toEqual("true"),expect(EventHandler.on).toHaveBeenCalledWith(jasmine.any(Object),"mouseover",noop),d.toggle()}),n.addEventListener("hidden.bs.dropdown",()=>{expect(n.classList.contains("show")).toEqual(!1),expect(n.getAttribute("aria-expanded")).toEqual("false"),expect(EventHandler.off).toHaveBeenCalledWith(jasmine.any(Object),"mouseover",noop),document.documentElement.ontouchstart=t,o()}),d.toggle()}),it("should toggle a dropdown at the right",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu dropdown-menu-end">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("shown.bs.dropdown",()=>{expect(t.classList.contains("show")).toEqual(!0),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()}),n.toggle()}),it("should toggle a dropup",o=>{e.innerHTML=['<div class="dropup">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropup"),d=new Dropdown(t);n.addEventListener("shown.bs.dropdown",()=>{expect(t.classList.contains("show")).toEqual(!0),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()}),d.toggle()}),it("should toggle a dropup at the right",o=>{e.innerHTML=['<div class="dropup">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu dropdown-menu-end">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropup"),d=new Dropdown(t);n.addEventListener("shown.bs.dropdown",()=>{expect(t.classList.contains("show")).toEqual(!0),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()}),d.toggle()}),it("should toggle a dropend",o=>{e.innerHTML=['<div class="dropend">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropend"),d=new Dropdown(t);n.addEventListener("shown.bs.dropdown",()=>{expect(t.classList.contains("show")).toEqual(!0),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()}),d.toggle()}),it("should toggle a dropstart",o=>{e.innerHTML=['<div class="dropstart">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropstart"),d=new Dropdown(t);n.addEventListener("shown.bs.dropdown",()=>{expect(t.classList.contains("show")).toEqual(!0),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()}),d.toggle()}),it("should toggle a dropdown with parent reference",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t,{reference:"parent"});t.addEventListener("shown.bs.dropdown",()=>{expect(t.classList.contains("show")).toEqual(!0),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()}),n.toggle()}),it("should toggle a dropdown with a dom node reference",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t,{reference:e});t.addEventListener("shown.bs.dropdown",()=>{expect(t.classList.contains("show")).toEqual(!0),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()}),n.toggle()}),it("should toggle a dropdown with a jquery object reference",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t,{reference:{0:e,jquery:"jQuery"}});t.addEventListener("shown.bs.dropdown",()=>{expect(t.classList.contains("show")).toEqual(!0),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()}),n.toggle()}),it("should toggle a dropdown with a valid virtual element reference",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle visually-hidden" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n={nodeType:1,getBoundingClientRect:()=>({width:0,height:0,top:0,right:0,bottom:0,left:0})};expect(()=>new Dropdown(t,{reference:{}})).toThrowError(TypeError,'DROPDOWN: Option "reference" provided type "object" without a required "getBoundingClientRect" method.'),expect(()=>new Dropdown(t,{reference:{getBoundingClientRect:"not-a-function"}})).toThrowError(TypeError,'DROPDOWN: Option "reference" provided type "object" without a required "getBoundingClientRect" method.');const d=new Dropdown(t,{reference:n,popperConfig:{onFirstUpdate(){expect(n.getBoundingClientRect).toHaveBeenCalled(),expect(t.classList.contains("show")).toEqual(!0),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()}}});spyOn(n,"getBoundingClientRect").and.callThrough(),d.toggle()}),it("should not toggle a dropdown if the element is disabled",o=>{e.innerHTML=['<div class="dropdown">','  <button disabled class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("shown.bs.dropdown",()=>{throw new Error("should not throw shown.bs.dropdown event")}),n.toggle(),setTimeout(()=>{expect().nothing(),o()})}),it("should not toggle a dropdown if the element contains .disabled",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle disabled" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("shown.bs.dropdown",()=>{throw new Error("should not throw shown.bs.dropdown event")}),n.toggle(),setTimeout(()=>{expect().nothing(),o()})}),it("should not toggle a dropdown if the menu is shown",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu show">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("shown.bs.dropdown",()=>{throw new Error("should not throw shown.bs.dropdown event")}),n.toggle(),setTimeout(()=>{expect().nothing(),o()})}),it("should not toggle a dropdown if show event is prevented",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("show.bs.dropdown",e=>{e.preventDefault()}),t.addEventListener("shown.bs.dropdown",()=>{throw new Error("should not throw shown.bs.dropdown event")}),n.toggle(),setTimeout(()=>{expect().nothing(),o()})})}),describe("show",()=>{it("should show a dropdown",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("shown.bs.dropdown",()=>{expect(t.classList.contains("show")).toEqual(!0),o()}),n.show()}),it("should not show a dropdown if the element is disabled",o=>{e.innerHTML=['<div class="dropdown">','  <button disabled class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("shown.bs.dropdown",()=>{throw new Error("should not throw shown.bs.dropdown event")}),n.show(),setTimeout(()=>{expect().nothing(),o()},10)}),it("should not show a dropdown if the element contains .disabled",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle disabled" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("shown.bs.dropdown",()=>{throw new Error("should not throw shown.bs.dropdown event")}),n.show(),setTimeout(()=>{expect().nothing(),o()},10)}),it("should not show a dropdown if the menu is shown",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu show">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("shown.bs.dropdown",()=>{throw new Error("should not throw shown.bs.dropdown event")}),n.show(),setTimeout(()=>{expect().nothing(),o()},10)}),it("should not show a dropdown if show event is prevented",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("show.bs.dropdown",e=>{e.preventDefault()}),t.addEventListener("shown.bs.dropdown",()=>{throw new Error("should not throw shown.bs.dropdown event")}),n.show(),setTimeout(()=>{expect().nothing(),o()},10)})}),describe("hide",()=>{it("should hide a dropdown",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="true">Dropdown</button>','  <div class="dropdown-menu show">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu"),d=new Dropdown(t);t.addEventListener("hidden.bs.dropdown",()=>{expect(n.classList.contains("show")).toEqual(!1),expect(t.getAttribute("aria-expanded")).toEqual("false"),o()}),d.hide()}),it("should hide a dropdown and destroy popper",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("shown.bs.dropdown",()=>{spyOn(n._popper,"destroy"),n.hide()}),t.addEventListener("hidden.bs.dropdown",()=>{expect(n._popper.destroy).toHaveBeenCalled(),o()}),n.show()}),it("should not hide a dropdown if the element is disabled",o=>{e.innerHTML=['<div class="dropdown">','  <button disabled class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu show">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu"),d=new Dropdown(t);t.addEventListener("hidden.bs.dropdown",()=>{throw new Error("should not throw hidden.bs.dropdown event")}),d.hide(),setTimeout(()=>{expect(n.classList.contains("show")).toEqual(!0),o()},10)}),it("should not hide a dropdown if the element contains .disabled",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle disabled" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu show">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu"),d=new Dropdown(t);t.addEventListener("hidden.bs.dropdown",()=>{throw new Error("should not throw hidden.bs.dropdown event")}),d.hide(),setTimeout(()=>{expect(n.classList.contains("show")).toEqual(!0),o()},10)}),it("should not hide a dropdown if the menu is not shown",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t);t.addEventListener("hidden.bs.dropdown",()=>{throw new Error("should not throw hidden.bs.dropdown event")}),n.hide(),setTimeout(()=>{expect().nothing(),o()},10)}),it("should not hide a dropdown if hide event is prevented",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu show">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu"),d=new Dropdown(t);t.addEventListener("hide.bs.dropdown",e=>{e.preventDefault()}),t.addEventListener("hidden.bs.dropdown",()=>{throw new Error("should not throw hidden.bs.dropdown event")}),d.hide(),setTimeout(()=>{expect(n.classList.contains("show")).toEqual(!0),o()})}),it("should remove event listener on touch-enabled device that was added in show method",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Dropdwon item</a>',"  </div>","</div>"].join("");const t=document.documentElement.ontouchstart,n=e.querySelector('[data-bs-toggle="dropdown"]'),d=new Dropdown(n);document.documentElement.ontouchstart=()=>{},spyOn(EventHandler,"off"),n.addEventListener("shown.bs.dropdown",()=>{d.hide()}),n.addEventListener("hidden.bs.dropdown",()=>{expect(n.classList.contains("show")).toEqual(!1),expect(n.getAttribute("aria-expanded")).toEqual("false"),expect(EventHandler.off).toHaveBeenCalled(),document.documentElement.ontouchstart=t,o()}),d.show()})}),describe("dispose",()=>{it("should dispose dropdown",()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=new Dropdown(o);expect(t._popper).toBeNull(),expect(t._menu).not.toBeNull(),expect(t._element).not.toBeNull(),spyOn(EventHandler,"off"),t.dispose(),expect(t._menu).toBeNull(),expect(t._element).toBeNull(),expect(EventHandler.off).toHaveBeenCalledWith(o,Dropdown.EVENT_KEY)}),it("should dispose dropdown with Popper",()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=new Dropdown(o);t.toggle(),expect(t._popper).not.toBeNull(),expect(t._menu).not.toBeNull(),expect(t._element).not.toBeNull(),t.dispose(),expect(t._popper).toBeNull(),expect(t._menu).toBeNull(),expect(t._element).toBeNull()})}),describe("update",()=>{it("should call Popper and detect navbar on update",()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=new Dropdown(o);t.toggle(),expect(t._popper).not.toBeNull(),spyOn(t._popper,"update"),spyOn(t,"_detectNavbar"),t.update(),expect(t._popper.update).toHaveBeenCalled(),expect(t._detectNavbar).toHaveBeenCalled()}),it("should just detect navbar on update",()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=new Dropdown(o);spyOn(t,"_detectNavbar"),t.update(),expect(t._popper).toBeNull(),expect(t._detectNavbar).toHaveBeenCalled()})}),describe("data-api",()=>{it("should show and hide a dropdown",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]');let n=!1,d=!1;t.addEventListener("show.bs.dropdown",()=>{n=!0}),t.addEventListener("shown.bs.dropdown",e=>setTimeout(()=>{expect(t.classList.contains("show")).toEqual(!0),expect(t.getAttribute("aria-expanded")).toEqual("true"),expect(n).toEqual(!0),expect(e.relatedTarget).toEqual(t),document.body.click()})),t.addEventListener("hide.bs.dropdown",()=>{d=!0}),t.addEventListener("hidden.bs.dropdown",e=>{expect(t.classList.contains("show")).toEqual(!1),expect(t.getAttribute("aria-expanded")).toEqual("false"),expect(d).toEqual(!0),expect(e.relatedTarget).toEqual(t),o()}),t.click()}),it("should not use Popper in navbar",o=>{e.innerHTML=['<nav class="navbar navbar-expand-md navbar-light bg-light">','  <div class="dropdown">','    <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','    <div class="dropdown-menu">','      <a class="dropdown-item" href="#">Secondary link</a>',"    </div>","  </div>","</nav>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu"),d=new Dropdown(t);t.addEventListener("shown.bs.dropdown",()=>{expect(d._popper).toBeNull(),expect(n.getAttribute("style")).toEqual(null,"no inline style applied by Popper"),o()}),d.show()}),it("should not collapse the dropdown when clicking a select option nested in the dropdown",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','  <div class="dropdown-menu">',"    <select>","      <option selected>Open this select menu</option>",'      <option value="1">One</option>',"    </select>","  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu"),d=new Dropdown(t),s=spyOn(d,"_completeHide");t.addEventListener("shown.bs.dropdown",()=>{const e=new MouseEvent("click",{bubbles:!0});n.querySelector("option").dispatchEvent(e)}),n.addEventListener("click",e=>{expect(e.target.tagName).toMatch(/select|option/i),Dropdown.clearMenus(e),setTimeout(()=>{expect(s).not.toHaveBeenCalled(),o()},10)}),d.show()}),it('should manage bs attribute `data-bs-popper`="none" when dropdown is in navbar',o=>{e.innerHTML=['<nav class="navbar navbar-expand-md navbar-light bg-light">','  <div class="dropdown">','    <button class="btn dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>','    <div class="dropdown-menu">','      <a class="dropdown-item" href="#">Secondary link</a>',"    </div>","  </div>","</nav>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu"),d=new Dropdown(t);t.addEventListener("shown.bs.dropdown",()=>{expect(n.getAttribute("data-bs-popper")).toEqual("none"),d.hide()}),t.addEventListener("hidden.bs.dropdown",()=>{expect(n.getAttribute("data-bs-popper")).toBeNull(),o()}),d.show()}),it("should not use Popper if display set to static",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" data-bs-display="static">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu");t.addEventListener("shown.bs.dropdown",()=>{expect(n.getAttribute("data-popper-placement")).toEqual(null),o()}),t.click()}),it('should manage bs attribute `data-bs-popper`="static" when display set to static',o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" data-bs-display="static">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu"),d=new Dropdown(t);t.addEventListener("shown.bs.dropdown",()=>{expect(n.getAttribute("data-bs-popper")).toEqual("static"),d.hide()}),t.addEventListener("hidden.bs.dropdown",()=>{expect(n.getAttribute("data-bs-popper")).toBeNull(),o()}),d.show()}),it('should remove "show" class if tabbing outside of menu',o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]');t.addEventListener("shown.bs.dropdown",()=>{expect(t.classList.contains("show")).toEqual(!0);const e=createEvent("keyup");e.key="Tab",document.dispatchEvent(e)}),t.addEventListener("hidden.bs.dropdown",()=>{expect(t.classList.contains("show")).toEqual(!1),o()}),t.click()}),it('should remove "show" class if body is clicked, with multiple dropdowns',o=>{e.innerHTML=['<div class="nav">','  <div class="dropdown" id="testmenu">','    <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#testmenu">Test menu</a>','    <div class="dropdown-menu">','      <a class="dropdown-item" href="#sub1">Submenu 1</a>',"    </div>","  </div>","</div>",'<div class="btn-group">','  <button class="btn">Actions</button>','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown"></button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Action 1</a>',"  </div>","</div>"].join("");const t=e.querySelectorAll('[data-bs-toggle="dropdown"]');expect(t.length).toEqual(2);const[n,d]=t;n.addEventListener("shown.bs.dropdown",()=>{expect(n.classList.contains("show")).toEqual(!0),expect(e.querySelectorAll(".dropdown-menu.show").length).toEqual(1),document.body.click()}),n.addEventListener("hidden.bs.dropdown",()=>{expect(e.querySelectorAll(".dropdown-menu.show").length).toEqual(0),d.click()}),d.addEventListener("shown.bs.dropdown",()=>{expect(d.classList.contains("show")).toEqual(!0),expect(e.querySelectorAll(".dropdown-menu.show").length).toEqual(1),document.body.click()}),d.addEventListener("hidden.bs.dropdown",()=>{expect(e.querySelectorAll(".dropdown-menu.show").length).toEqual(0),o()}),n.click()}),it('should remove "show" class if body if tabbing outside of menu, with multiple dropdowns',o=>{e.innerHTML=['<div class="dropdown">','  <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#testmenu">Test menu</a>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#sub1">Submenu 1</a>',"  </div>","</div>",'<div class="btn-group">','  <button class="btn">Actions</button>','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown"></button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Action 1</a>',"  </div>","</div>"].join("");const t=e.querySelectorAll('[data-bs-toggle="dropdown"]');expect(t.length).toEqual(2);const[n,d]=t;n.addEventListener("shown.bs.dropdown",()=>{expect(n.classList.contains("show")).toEqual(!0,'"show" class added on click'),expect(e.querySelectorAll(".dropdown-menu.show").length).toEqual(1,"only one dropdown is shown");const o=createEvent("keyup");o.key="Tab",document.dispatchEvent(o)}),n.addEventListener("hidden.bs.dropdown",()=>{expect(e.querySelectorAll(".dropdown-menu.show").length).toEqual(0,'"show" class removed'),d.click()}),d.addEventListener("shown.bs.dropdown",()=>{expect(d.classList.contains("show")).toEqual(!0,'"show" class added on click'),expect(e.querySelectorAll(".dropdown-menu.show").length).toEqual(1,"only one dropdown is shown");const o=createEvent("keyup");o.key="Tab",document.dispatchEvent(o)}),d.addEventListener("hidden.bs.dropdown",()=>{expect(e.querySelectorAll(".dropdown-menu.show").length).toEqual(0,'"show" class removed'),o()}),n.click()}),it("should fire hide and hidden event without a clickEvent if event type is not click",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#sub1">Submenu 1</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]');t.addEventListener("hide.bs.dropdown",e=>{expect(e.clickEvent).toBeUndefined()}),t.addEventListener("hidden.bs.dropdown",e=>{expect(e.clickEvent).toBeUndefined(),o()}),t.addEventListener("shown.bs.dropdown",()=>{const e=createEvent("keydown");e.key="Escape",t.dispatchEvent(e)}),t.click()}),it("should bubble up the events to the parent elements",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#subMenu">Sub menu</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown"),d=new Dropdown(t),s=jasmine.createSpy("showFunction");n.addEventListener("show.bs.dropdown",s);const r=jasmine.createSpy("shownFunction");n.addEventListener("shown.bs.dropdown",()=>{r(),d.hide()});const a=jasmine.createSpy("hideFunction");n.addEventListener("hide.bs.dropdown",a),n.addEventListener("hidden.bs.dropdown",()=>{expect(s).toHaveBeenCalled(),expect(r).toHaveBeenCalled(),expect(a).toHaveBeenCalled(),o()}),d.show()}),it("should ignore keyboard events within <input>s and <textarea>s",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#sub1">Submenu 1</a>','    <input type="text">',"    <textarea></textarea>","  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("input"),d=e.querySelector("textarea");t.addEventListener("shown.bs.dropdown",()=>{n.focus();const e=createEvent("keydown");e.key="ArrowUp",n.dispatchEvent(e),expect(document.activeElement).toEqual(n,"input still focused"),d.focus(),d.dispatchEvent(e),expect(document.activeElement).toEqual(d,"textarea still focused"),o()}),t.click()}),it("should skip disabled element when using keyboard navigation",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item disabled" href="#sub1">Submenu 1</a>','    <button class="dropdown-item" type="button" disabled>Disabled button</button>','    <a id="item1" class="dropdown-item" href="#">Another link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]');t.addEventListener("shown.bs.dropdown",()=>{const e=createEvent("keydown");e.key="ArrowDown",t.dispatchEvent(e),t.dispatchEvent(e),expect(document.activeElement.classList.contains("disabled")).toEqual(!1,".disabled not focused"),expect(document.activeElement.hasAttribute("disabled")).toEqual(!1,":disabled not focused"),o()}),t.click()}),it("should skip hidden element when using keyboard navigation",o=>{e.innerHTML=["<style>","  .d-none {","    display: none;","  }","</style>",'<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <button class="dropdown-item d-none" type="button">Hidden button by class</button>','    <a class="dropdown-item" href="#sub1" style="display: none">Hidden link</a>','    <a class="dropdown-item" href="#sub1" style="visibility: hidden">Hidden link</a>','    <a id="item1" class="dropdown-item" href="#">Another link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]');t.addEventListener("shown.bs.dropdown",()=>{const e=createEvent("keydown");e.key="ArrowDown",t.dispatchEvent(e),expect(document.activeElement.classList.contains("d-none")).toEqual(!1,".d-none not focused"),expect(document.activeElement.style.display).not.toBe("none",'"display: none" not focused'),expect(document.activeElement.style.visibility).not.toBe("hidden",'"visibility: hidden" not focused'),o()}),t.click()}),it("should focus next/previous element when using keyboard navigation",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a id="item1" class="dropdown-item" href="#">A link</a>','    <a id="item2" class="dropdown-item" href="#">Another link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("#item1"),d=e.querySelector("#item2");t.addEventListener("shown.bs.dropdown",()=>{const e=createEvent("keydown");e.key="ArrowDown",t.dispatchEvent(e),expect(document.activeElement).toEqual(n,"item1 is focused"),document.activeElement.dispatchEvent(e),expect(document.activeElement).toEqual(d,"item2 is focused");const s=createEvent("keydown");s.key="ArrowUp",document.activeElement.dispatchEvent(s),expect(document.activeElement).toEqual(n,"item1 is focused"),o()}),t.click()}),it("should open the dropdown and focus on the last item when using ArrowUp for the first time",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a id="item1" class="dropdown-item" href="#">A link</a>','    <a id="item2" class="dropdown-item" href="#">Another link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("#item2");t.addEventListener("shown.bs.dropdown",()=>{setTimeout(()=>{expect(document.activeElement).toEqual(n,"item2 is focused"),o()})});const d=createEvent("keydown");d.key="ArrowUp",t.dispatchEvent(d)}),it("should open the dropdown and focus on the first item when using ArrowDown for the first time",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a id="item1" class="dropdown-item" href="#">A link</a>','    <a id="item2" class="dropdown-item" href="#">Another link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("#item1");t.addEventListener("shown.bs.dropdown",()=>{setTimeout(()=>{expect(document.activeElement).toEqual(n,"item1 is focused"),o()})});const d=createEvent("keydown");d.key="ArrowDown",t.dispatchEvent(d)}),it("should not close the dropdown if the user clicks on a text field within dropdown-menu",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <input type="text">',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("input");n.addEventListener("click",()=>{expect(t.classList.contains("show")).toEqual(!0,"dropdown menu is shown"),o()}),t.addEventListener("shown.bs.dropdown",()=>{expect(t.classList.contains("show")).toEqual(!0,"dropdown menu is shown"),n.dispatchEvent(createEvent("click"))}),t.click()}),it("should not close the dropdown if the user clicks on a textarea within dropdown-menu",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">',"    <textarea></textarea>","  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("textarea");n.addEventListener("click",()=>{expect(t.classList.contains("show")).toEqual(!0,"dropdown menu is shown"),o()}),t.addEventListener("shown.bs.dropdown",()=>{expect(t.classList.contains("show")).toEqual(!0,"dropdown menu is shown"),n.dispatchEvent(createEvent("click"))}),t.click()}),it("should close the dropdown if the user clicks on a text field that is not contained within dropdown-menu",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">',"  </div>","</div>",'<input type="text">'];const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("input");t.addEventListener("hidden.bs.dropdown",()=>{expect().nothing(),o()}),t.addEventListener("shown.bs.dropdown",()=>{n.dispatchEvent(createEvent("click",{bubbles:!0}))}),t.click()}),it("should ignore keyboard events for <input>s and <textarea>s within dropdown-menu, except for escape key",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#sub1">Submenu 1</a>','    <input type="text">',"    <textarea></textarea>","  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("input"),d=e.querySelector("textarea"),s=createEvent("keydown");s.key="Space";const r=createEvent("keydown");r.key="ArrowUp";const a=createEvent("keydown");a.key="ArrowDown";const i=createEvent("keydown");i.key="Escape",t.addEventListener("shown.bs.dropdown",()=>{n.focus(),n.dispatchEvent(s),expect(document.activeElement).toEqual(n,"input still focused"),d.focus(),d.dispatchEvent(s),expect(document.activeElement).toEqual(d,"textarea still focused"),n.focus(),n.dispatchEvent(r),expect(document.activeElement).toEqual(n,"input still focused"),d.focus(),d.dispatchEvent(r),expect(document.activeElement).toEqual(d,"textarea still focused"),n.focus(),n.dispatchEvent(a),expect(document.activeElement).toEqual(n,"input still focused"),d.focus(),d.dispatchEvent(a),expect(document.activeElement).toEqual(d,"textarea still focused"),n.focus(),n.dispatchEvent(i),expect(t.classList.contains("show")).toEqual(!1,"dropdown menu is not shown"),o()}),t.click()}),it("should not open dropdown if escape key was pressed on the toggle",o=>{e.innerHTML=['<div class="tabs">','  <div class="dropdown">','    <button disabled class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','    <div class="dropdown-menu">','      <a class="dropdown-item" href="#">Secondary link</a>','      <a class="dropdown-item" href="#">Something else here</a>','      <div class="divider"></div>','     <a class="dropdown-item" href="#">Another link</a>',"   </div>","  </div>","</div>"];const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=new Dropdown(t),d=e.querySelector('button[data-bs-toggle="dropdown"]');spyOn(n,"toggle"),d.focus();const s=createEvent("keydown");s.key="Escape",d.dispatchEvent(s),setTimeout(()=>{expect(n.toggle).not.toHaveBeenCalled(),expect(t.classList.contains("show")).toEqual(!1),o()},20)}),it("should propagate escape key events if dropdown is closed",o=>{e.innerHTML=['<div class="parent">','  <div class="dropdown">','    <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','    <div class="dropdown-menu">','      <a class="dropdown-item" href="#">Some Item</a>',"   </div>","  </div>","</div>"];const t=e.querySelector(".parent"),n=e.querySelector('[data-bs-toggle="dropdown"]'),d=jasmine.createSpy("parentKeyHandler");t.addEventListener("keydown",d),t.addEventListener("keyup",()=>{expect(d).toHaveBeenCalled(),o()});const s=createEvent("keydown",{bubbles:!0});s.key="Escape";const r=createEvent("keyup",{bubbles:!0});r.key="Escape",n.focus(),n.dispatchEvent(s),n.dispatchEvent(r)}),it('should close dropdown (only) by clicking inside the dropdown menu when it has data-attribute `data-bs-auto-close="inside"`',o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" data-bs-auto-close="inside">Dropdown toggle</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Dropdown item</a>'," </div>","</div>"];const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu");t.addEventListener("shown.bs.dropdown",()=>{document.documentElement.click(),setTimeout(()=>{expect(t.classList.contains("show")).toEqual(!0),n.click()},150)}),t.addEventListener("hidden.bs.dropdown",()=>setTimeout(()=>{expect(t.classList.contains("show")).toEqual(!1),o()})),t.click()}),it('should close dropdown (only) by clicking outside the dropdown menu when it has data-attribute `data-bs-auto-close="outside"`',o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" data-bs-auto-close="outside">Dropdown toggle</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Dropdown item</a>'," </div>","</div>"];const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu");t.addEventListener("shown.bs.dropdown",()=>{n.click(),setTimeout(()=>{expect(t.classList.contains("show")).toEqual(!0),document.documentElement.click()},150)}),t.addEventListener("hidden.bs.dropdown",()=>{expect(t.classList.contains("show")).toEqual(!1),o()}),t.click()}),it('should not close dropdown by clicking inside or outside the dropdown menu when it has data-attribute `data-bs-auto-close="false"`',o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown" data-bs-auto-close="false">Dropdown toggle</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Dropdown item</a>'," </div>","</div>"];const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown-menu"),d=(e=!0)=>setTimeout(()=>{expect(t.classList.contains("show")).toEqual(!0),e?document.documentElement.click():o(),d(!1)},150);t.addEventListener("shown.bs.dropdown",()=>{n.click(),d()}),t.click()})}),describe("jQueryInterface",()=>{it("should create a dropdown",()=>{e.innerHTML="<div></div>";const o=e.querySelector("div");jQueryMock.fn.dropdown=Dropdown.jQueryInterface,jQueryMock.elements=[o],jQueryMock.fn.dropdown.call(jQueryMock),expect(Dropdown.getInstance(o)).not.toBeNull()}),it("should not re create a dropdown",()=>{e.innerHTML="<div></div>";const o=e.querySelector("div"),t=new Dropdown(o);jQueryMock.fn.dropdown=Dropdown.jQueryInterface,jQueryMock.elements=[o],jQueryMock.fn.dropdown.call(jQueryMock),expect(Dropdown.getInstance(o)).toEqual(t)}),it("should throw error on undefined method",()=>{e.innerHTML="<div></div>";const o=e.querySelector("div");jQueryMock.fn.dropdown=Dropdown.jQueryInterface,jQueryMock.elements=[o],expect(()=>{jQueryMock.fn.dropdown.call(jQueryMock,"undefinedMethod")}).toThrowError(TypeError,'No method named "undefinedMethod"')})}),describe("getInstance",()=>{it("should return dropdown instance",()=>{e.innerHTML="<div></div>";const o=e.querySelector("div"),t=new Dropdown(o);expect(Dropdown.getInstance(o)).toEqual(t),expect(Dropdown.getInstance(o)).toBeInstanceOf(Dropdown)}),it("should return null when there is no dropdown instance",()=>{e.innerHTML="<div></div>";const o=e.querySelector("div");expect(Dropdown.getInstance(o)).toEqual(null)})}),describe("getOrCreateInstance",()=>{it("should return dropdown instance",()=>{e.innerHTML="<div></div>";const o=e.querySelector("div"),t=new Dropdown(o);expect(Dropdown.getOrCreateInstance(o)).toEqual(t),expect(Dropdown.getInstance(o)).toEqual(Dropdown.getOrCreateInstance(o,{})),expect(Dropdown.getOrCreateInstance(o)).toBeInstanceOf(Dropdown)}),it("should return new instance when there is no dropdown instance",()=>{e.innerHTML="<div></div>";const o=e.querySelector("div");expect(Dropdown.getInstance(o)).toEqual(null),expect(Dropdown.getOrCreateInstance(o)).toBeInstanceOf(Dropdown)}),it("should return new instance when there is no dropdown instance with given configuration",()=>{e.innerHTML="<div></div>";const o=e.querySelector("div");expect(Dropdown.getInstance(o)).toEqual(null);const t=Dropdown.getOrCreateInstance(o,{display:"dynamic"});expect(t).toBeInstanceOf(Dropdown),expect(t._config.display).toEqual("dynamic")}),it("should return the instance when exists without given configuration",()=>{e.innerHTML="<div></div>";const o=e.querySelector("div"),t=new Dropdown(o,{display:"dynamic"});expect(Dropdown.getInstance(o)).toEqual(t);const n=Dropdown.getOrCreateInstance(o,{display:"static"});expect(t).toBeInstanceOf(Dropdown),expect(n).toEqual(t),expect(n._config.display).toEqual("dynamic")})}),it("should open dropdown when pressing keydown or keyup",o=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item disabled" href="#sub1">Submenu 1</a>','    <button class="dropdown-item" type="button" disabled>Disabled button</button>','    <a id="item1" class="dropdown-item" href="#">Another link</a>',"  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector(".dropdown"),d=createEvent("keydown");d.key="ArrowDown";const s=createEvent("keyup");s.key="ArrowUp";n.addEventListener("shown.bs.dropdown",e=>{"ArrowDown"===e.target.key?(expect(t.classList.contains("show")).toEqual(!0),expect(t.getAttribute("aria-expanded")).toEqual("true"),setTimeout(()=>{n.hide(),d.key="ArrowUp",t.dispatchEvent(s)},20)):(expect(t.classList.contains("show")).toEqual(!0),expect(t.getAttribute("aria-expanded")).toEqual("true"),o())}),t.dispatchEvent(d)}),it('should allow `data-bs-toggle="dropdown"` click events to bubble up',()=>{e.innerHTML=['<div class="dropdown">','  <button class="btn dropdown-toggle" data-bs-toggle="dropdown">Dropdown</button>','  <div class="dropdown-menu">','    <a class="dropdown-item" href="#">Secondary link</a>',"  </div>","</div>"].join("");const o=e.querySelector('[data-bs-toggle="dropdown"]'),t=jasmine.createSpy("clickListener"),n=jasmine.createSpy("delegatedClickListener");o.addEventListener("click",t),document.addEventListener("click",n),o.click(),expect(t).toHaveBeenCalled(),expect(n).toHaveBeenCalled()}),it('should open the dropdown when clicking the child element inside `data-bs-toggle="dropdown"`',o=>{e.innerHTML=['<div class="container">','  <div class="dropdown">','    <button class="btn dropdown-toggle" data-bs-toggle="dropdown"><span id="childElement">Dropdown</span></button>','    <div class="dropdown-menu">','      <a class="dropdown-item" href="#subMenu">Sub menu</a>',"    </div>","  </div>","</div>"].join("");const t=e.querySelector('[data-bs-toggle="dropdown"]'),n=e.querySelector("#childElement");t.addEventListener("shown.bs.dropdown",()=>setTimeout(()=>{expect(t.classList.contains("show")).toEqual(!0),expect(t.getAttribute("aria-expanded")).toEqual("true"),o()})),n.click()})});