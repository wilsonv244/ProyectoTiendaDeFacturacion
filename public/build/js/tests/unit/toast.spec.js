import Toast from"../../src/toast";import{getFixture,clearFixture,createEvent,jQueryMock}from"../helpers/fixture";describe("Toast",()=>{let t;beforeAll(()=>{t=getFixture()}),afterEach(()=>{clearFixture()}),describe("VERSION",()=>{it("should return plugin version",()=>{expect(Toast.VERSION).toEqual(jasmine.any(String))})}),describe("DATA_KEY",()=>{it("should return plugin data key",()=>{expect(Toast.DATA_KEY).toEqual("bs.toast")})}),describe("constructor",()=>{it("should take care of element either passed as a CSS selector or DOM element",()=>{t.innerHTML='<div class="toast"></div>';const e=t.querySelector(".toast"),s=new Toast(".toast"),o=new Toast(e);expect(s._element).toEqual(e),expect(o._element).toEqual(e)}),it("should allow to config in js",e=>{t.innerHTML=['<div class="toast">','  <div class="toast-body">',"    a simple toast","  </div>","</div>"].join("");const s=t.querySelector("div"),o=new Toast(s,{delay:1});s.addEventListener("shown.bs.toast",()=>{expect(s.classList.contains("show")).toEqual(!0),e()}),o.show()}),it("should close toast when close element with data-bs-dismiss attribute is set",e=>{t.innerHTML=['<div class="toast" data-bs-delay="1" data-bs-autohide="false" data-bs-animation="false">','  <button type="button" class="ms-2 mb-1 btn-close" data-bs-dismiss="toast" aria-label="Close"></button>',"</div>"].join("");const s=t.querySelector("div"),o=new Toast(s);s.addEventListener("shown.bs.toast",()=>{expect(s.classList.contains("show")).toEqual(!0);s.querySelector(".btn-close").click()}),s.addEventListener("hidden.bs.toast",()=>{expect(s.classList.contains("show")).toEqual(!1),e()}),o.show()})}),describe("Default",()=>{it("should expose default setting to allow to override them",()=>{Toast.Default.delay=1e3,t.innerHTML=['<div class="toast" data-bs-autohide="false" data-bs-animation="false">','  <button type="button" class="ms-2 mb-1 btn-close" data-bs-dismiss="toast" aria-label="Close"></button>',"</div>"].join("");const e=t.querySelector("div"),s=new Toast(e);expect(s._config.delay).toEqual(1e3)})}),describe("DefaultType",()=>{it("should expose default setting types for read",()=>{expect(Toast.DefaultType).toEqual(jasmine.any(Object))})}),describe("show",()=>{it("should auto hide",e=>{t.innerHTML=['<div class="toast" data-bs-delay="1">','  <div class="toast-body">',"    a simple toast","  </div>","</div>"].join("");const s=t.querySelector(".toast"),o=new Toast(s);s.addEventListener("hidden.bs.toast",()=>{expect(s.classList.contains("show")).toEqual(!1),e()}),o.show()}),it("should not add fade class",e=>{t.innerHTML=['<div class="toast" data-bs-delay="1" data-bs-animation="false">','  <div class="toast-body">',"    a simple toast","  </div>","</div>"].join("");const s=t.querySelector(".toast"),o=new Toast(s);s.addEventListener("shown.bs.toast",()=>{expect(s.classList.contains("fade")).toEqual(!1),e()}),o.show()}),it("should not trigger shown if show is prevented",e=>{t.innerHTML=['<div class="toast" data-bs-delay="1" data-bs-animation="false">','  <div class="toast-body">',"    a simple toast","  </div>","</div>"].join("");const s=t.querySelector(".toast"),o=new Toast(s);s.addEventListener("show.bs.toast",t=>{t.preventDefault(),setTimeout(()=>{expect(s.classList.contains("show")).toEqual(!1),e()},20)}),s.addEventListener("shown.bs.toast",()=>{throw new Error("shown event should not be triggered if show is prevented")}),o.show()}),it("should clear timeout if toast is shown again before it is hidden",e=>{t.innerHTML=['<div class="toast">','  <div class="toast-body">',"    a simple toast","  </div>","</div>"].join("");const s=t.querySelector(".toast"),o=new Toast(s);setTimeout(()=>{o._config.autohide=!1,s.addEventListener("shown.bs.toast",()=>{expect(o._clearTimeout).toHaveBeenCalled(),expect(o._timeout).toBeNull(),e()}),o.show()},o._config.delay/2),spyOn(o,"_clearTimeout").and.callThrough(),o.show()}),it("should clear timeout if toast is interacted with mouse",e=>{t.innerHTML=['<div class="toast">','  <div class="toast-body">',"    a simple toast","  </div>","</div>"].join("");const s=t.querySelector(".toast"),o=new Toast(s),a=spyOn(o,"_clearTimeout").and.callThrough();setTimeout(()=>{a.calls.reset(),s.addEventListener("mouseover",()=>{expect(o._clearTimeout).toHaveBeenCalledTimes(1),expect(o._timeout).toBeNull(),e()});const t=createEvent("mouseover");s.dispatchEvent(t)},o._config.delay/2),o.show()}),it("should clear timeout if toast is interacted with keyboard",e=>{t.innerHTML=['<button id="outside-focusable">outside focusable</button>','<div class="toast">','  <div class="toast-body">',"    a simple toast","    <button>with a button</button>","  </div>","</div>"].join("");const s=t.querySelector(".toast"),o=new Toast(s),a=spyOn(o,"_clearTimeout").and.callThrough();setTimeout(()=>{a.calls.reset(),s.addEventListener("focusin",()=>{expect(o._clearTimeout).toHaveBeenCalledTimes(1),expect(o._timeout).toBeNull(),e()});s.querySelector("button").focus()},o._config.delay/2),o.show()}),it("should still auto hide after being interacted with mouse and keyboard",e=>{t.innerHTML=['<button id="outside-focusable">outside focusable</button>','<div class="toast">','  <div class="toast-body">',"    a simple toast","    <button>with a button</button>","  </div>","</div>"].join("");const s=t.querySelector(".toast"),o=new Toast(s);setTimeout(()=>{s.addEventListener("mouseover",()=>{s.querySelector("button").focus()}),s.addEventListener("focusin",()=>{const t=createEvent("mouseout");s.dispatchEvent(t)}),s.addEventListener("mouseout",()=>{document.getElementById("outside-focusable").focus()}),s.addEventListener("focusout",()=>{expect(o._timeout).not.toBeNull(),e()});const t=createEvent("mouseover");s.dispatchEvent(t)},o._config.delay/2),o.show()}),it("should not auto hide if focus leaves but mouse pointer remains inside",e=>{t.innerHTML=['<button id="outside-focusable">outside focusable</button>','<div class="toast">','  <div class="toast-body">',"    a simple toast","    <button>with a button</button>","  </div>","</div>"].join("");const s=t.querySelector(".toast"),o=new Toast(s);setTimeout(()=>{s.addEventListener("mouseover",()=>{s.querySelector("button").focus()}),s.addEventListener("focusin",()=>{document.getElementById("outside-focusable").focus()}),s.addEventListener("focusout",()=>{expect(o._timeout).toBeNull(),e()});const t=createEvent("mouseover");s.dispatchEvent(t)},o._config.delay/2),o.show()}),it("should not auto hide if mouse pointer leaves but focus remains inside",e=>{t.innerHTML=['<button id="outside-focusable">outside focusable</button>','<div class="toast">','  <div class="toast-body">',"    a simple toast","    <button>with a button</button>","  </div>","</div>"].join("");const s=t.querySelector(".toast"),o=new Toast(s);setTimeout(()=>{s.addEventListener("mouseover",()=>{s.querySelector("button").focus()}),s.addEventListener("focusin",()=>{const t=createEvent("mouseout");s.dispatchEvent(t)}),s.addEventListener("mouseout",()=>{expect(o._timeout).toBeNull(),e()});const t=createEvent("mouseover");s.dispatchEvent(t)},o._config.delay/2),o.show()})}),describe("hide",()=>{it("should allow to hide toast manually",e=>{t.innerHTML=['<div class="toast" data-bs-delay="1" data-bs-autohide="false">','  <div class="toast-body">',"    a simple toast","  </div>","  </div>"].join("");const s=t.querySelector(".toast"),o=new Toast(s);s.addEventListener("shown.bs.toast",()=>{o.hide()}),s.addEventListener("hidden.bs.toast",()=>{expect(s.classList.contains("show")).toEqual(!1),e()}),o.show()}),it("should do nothing when we call hide on a non shown toast",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div"),s=new Toast(e);spyOn(e.classList,"contains"),s.hide(),expect(e.classList.contains).toHaveBeenCalled()}),it("should not trigger hidden if hide is prevented",e=>{t.innerHTML=['<div class="toast" data-bs-delay="1" data-bs-animation="false">','  <div class="toast-body">',"    a simple toast","  </div>","</div>"].join("");const s=t.querySelector(".toast"),o=new Toast(s);s.addEventListener("shown.bs.toast",()=>{o.hide()}),s.addEventListener("hide.bs.toast",t=>{t.preventDefault(),setTimeout(()=>{expect(s.classList.contains("show")).toEqual(!0),e()},20)}),s.addEventListener("hidden.bs.toast",()=>{throw new Error("hidden event should not be triggered if hide is prevented")}),o.show()})}),describe("dispose",()=>{it("should allow to destroy toast",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div"),s=new Toast(e);expect(Toast.getInstance(e)).not.toBeNull(),s.dispose(),expect(Toast.getInstance(e)).toBeNull()}),it("should allow to destroy toast and hide it before that",e=>{t.innerHTML=['<div class="toast" data-bs-delay="0" data-bs-autohide="false">','  <div class="toast-body">',"    a simple toast","  </div>","</div>"].join("");const s=t.querySelector("div"),o=new Toast(s),a=()=>{expect(s.classList.contains("show")).toEqual(!0),expect(Toast.getInstance(s)).not.toBeNull(),o.dispose(),expect(Toast.getInstance(s)).toBeNull(),expect(s.classList.contains("show")).toEqual(!1),e()};s.addEventListener("shown.bs.toast",()=>{setTimeout(a,1)}),o.show()})}),describe("jQueryInterface",()=>{it("should create a toast",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div");jQueryMock.fn.toast=Toast.jQueryInterface,jQueryMock.elements=[e],jQueryMock.fn.toast.call(jQueryMock),expect(Toast.getInstance(e)).not.toBeNull()}),it("should not re create a toast",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div"),s=new Toast(e);jQueryMock.fn.toast=Toast.jQueryInterface,jQueryMock.elements=[e],jQueryMock.fn.toast.call(jQueryMock),expect(Toast.getInstance(e)).toEqual(s)}),it("should call a toast method",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div"),s=new Toast(e);spyOn(s,"show"),jQueryMock.fn.toast=Toast.jQueryInterface,jQueryMock.elements=[e],jQueryMock.fn.toast.call(jQueryMock,"show"),expect(Toast.getInstance(e)).toEqual(s),expect(s.show).toHaveBeenCalled()}),it("should throw error on undefined method",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div");jQueryMock.fn.toast=Toast.jQueryInterface,jQueryMock.elements=[e],expect(()=>{jQueryMock.fn.toast.call(jQueryMock,"undefinedMethod")}).toThrowError(TypeError,'No method named "undefinedMethod"')})}),describe("getInstance",()=>{it("should return a toast instance",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div"),s=new Toast(e);expect(Toast.getInstance(e)).toEqual(s),expect(Toast.getInstance(e)).toBeInstanceOf(Toast)}),it("should return null when there is no toast instance",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div");expect(Toast.getInstance(e)).toEqual(null)})}),describe("getOrCreateInstance",()=>{it("should return toast instance",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div"),s=new Toast(e);expect(Toast.getOrCreateInstance(e)).toEqual(s),expect(Toast.getInstance(e)).toEqual(Toast.getOrCreateInstance(e,{})),expect(Toast.getOrCreateInstance(e)).toBeInstanceOf(Toast)}),it("should return new instance when there is no toast instance",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div");expect(Toast.getInstance(e)).toEqual(null),expect(Toast.getOrCreateInstance(e)).toBeInstanceOf(Toast)}),it("should return new instance when there is no toast instance with given configuration",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div");expect(Toast.getInstance(e)).toEqual(null);const s=Toast.getOrCreateInstance(e,{delay:1});expect(s).toBeInstanceOf(Toast),expect(s._config.delay).toEqual(1)}),it("should return the instance when exists without given configuration",()=>{t.innerHTML="<div></div>";const e=t.querySelector("div"),s=new Toast(e,{delay:1});expect(Toast.getInstance(e)).toEqual(s);const o=Toast.getOrCreateInstance(e,{delay:2});expect(s).toBeInstanceOf(Toast),expect(o).toEqual(s),expect(o._config.delay).toEqual(1)})})});