import Offcanvas from"../../src/offcanvas";import EventHandler from"../../src/dom/event-handler";import{clearBodyAndDocument,clearFixture,createEvent,getFixture,jQueryMock}from"../helpers/fixture";import{isVisible}from"../../src/util";import ScrollBarHelper from"../../src/util/scrollbar";describe("Offcanvas",()=>{let e;beforeAll(()=>{e=getFixture()}),afterEach(()=>{clearFixture(),document.body.classList.remove("offcanvas-open"),clearBodyAndDocument()}),beforeEach(()=>{clearBodyAndDocument()}),describe("VERSION",()=>{it("should return plugin version",()=>{expect(Offcanvas.VERSION).toEqual(jasmine.any(String))})}),describe("Default",()=>{it("should return plugin default config",()=>{expect(Offcanvas.Default).toEqual(jasmine.any(Object))})}),describe("DATA_KEY",()=>{it("should return plugin data key",()=>{expect(Offcanvas.DATA_KEY).toEqual("bs.offcanvas")})}),describe("constructor",()=>{it('should call hide when a element with data-bs-dismiss="offcanvas" is clicked',()=>{e.innerHTML=['<div class="offcanvas">','  <a href="#" data-bs-dismiss="offcanvas">Close</a>',"</div>"].join("");const a=e.querySelector(".offcanvas"),n=e.querySelector("a"),o=new Offcanvas(a);spyOn(o,"hide"),n.click(),expect(o._config.keyboard).toBe(!0),expect(o.hide).toHaveBeenCalled()}),it("should hide if esc is pressed",()=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector(".offcanvas"),n=new Offcanvas(a),o=createEvent("keydown");o.key="Escape",spyOn(n,"hide"),a.dispatchEvent(o),expect(n.hide).toHaveBeenCalled()}),it("should not hide if esc is not pressed",()=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector(".offcanvas"),n=new Offcanvas(a),o=createEvent("keydown");o.key="Tab",spyOn(n,"hide"),document.dispatchEvent(o),expect(n.hide).not.toHaveBeenCalled()}),it("should not hide if esc is pressed but with keyboard = false",()=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector(".offcanvas"),n=new Offcanvas(a,{keyboard:!1}),o=createEvent("keydown");o.key="Escape",spyOn(n,"hide"),document.dispatchEvent(o),expect(n._config.keyboard).toBe(!1),expect(n.hide).not.toHaveBeenCalled()})}),describe("config",()=>{it("should have default values",()=>{e.innerHTML=['<div class="offcanvas">',"</div>"].join("");const a=e.querySelector(".offcanvas"),n=new Offcanvas(a);expect(n._config.backdrop).toEqual(!0),expect(n._backdrop._config.isVisible).toEqual(!0),expect(n._config.keyboard).toEqual(!0),expect(n._config.scroll).toEqual(!1)}),it("should read data attributes and override default config",()=>{e.innerHTML=['<div class="offcanvas" data-bs-scroll="true" data-bs-backdrop="false"  data-bs-keyboard="false">',"</div>"].join("");const a=e.querySelector(".offcanvas"),n=new Offcanvas(a);expect(n._config.backdrop).toEqual(!1),expect(n._backdrop._config.isVisible).toEqual(!1),expect(n._config.keyboard).toEqual(!1),expect(n._config.scroll).toEqual(!0)}),it("given a config object must override data attributes",()=>{e.innerHTML=['<div class="offcanvas" data-bs-scroll="true" data-bs-backdrop="false"  data-bs-keyboard="false">',"</div>"].join("");const a=e.querySelector(".offcanvas"),n=new Offcanvas(a,{backdrop:!0,keyboard:!0,scroll:!1});expect(n._config.backdrop).toEqual(!0),expect(n._config.keyboard).toEqual(!0),expect(n._config.scroll).toEqual(!1)})}),describe("options",()=>{it("if scroll is enabled, should allow body to scroll while offcanvas is open",a=>{e.innerHTML='<div class="offcanvas"></div>',spyOn(ScrollBarHelper.prototype,"hide").and.callThrough(),spyOn(ScrollBarHelper.prototype,"reset").and.callThrough();const n=e.querySelector(".offcanvas"),o=new Offcanvas(n,{scroll:!0});n.addEventListener("shown.bs.offcanvas",()=>{expect(ScrollBarHelper.prototype.hide).not.toHaveBeenCalled(),o.hide()}),n.addEventListener("hidden.bs.offcanvas",()=>{expect(ScrollBarHelper.prototype.reset).not.toHaveBeenCalled(),a()}),o.show()}),it("if scroll is disabled, should call ScrollBarHelper to handle scrollBar on body",a=>{e.innerHTML='<div class="offcanvas"></div>',spyOn(ScrollBarHelper.prototype,"hide").and.callThrough(),spyOn(ScrollBarHelper.prototype,"reset").and.callThrough();const n=e.querySelector(".offcanvas"),o=new Offcanvas(n,{scroll:!1});n.addEventListener("shown.bs.offcanvas",()=>{expect(ScrollBarHelper.prototype.hide).toHaveBeenCalled(),o.hide()}),n.addEventListener("hidden.bs.offcanvas",()=>{expect(ScrollBarHelper.prototype.reset).toHaveBeenCalled(),a()}),o.show()}),it("should hide a shown element if user click on backdrop",a=>{e.innerHTML='<div class="offcanvas"></div>';const n=e.querySelector("div"),o=new Offcanvas(n,{backdrop:!0}),t=document.createEvent("MouseEvents");t.initEvent("mousedown",!0,!0),spyOn(o._backdrop._config,"clickCallback").and.callThrough(),n.addEventListener("shown.bs.offcanvas",()=>{expect(typeof o._backdrop._config.clickCallback).toBe("function"),o._backdrop._getElement().dispatchEvent(t)}),n.addEventListener("hidden.bs.offcanvas",()=>{expect(o._backdrop._config.clickCallback).toHaveBeenCalled(),a()}),o.show()}),it("should not trap focus if scroll is allowed",a=>{e.innerHTML='<div class="offcanvas"></div>';const n=e.querySelector(".offcanvas"),o=new Offcanvas(n,{scroll:!0});spyOn(o._focustrap,"activate").and.callThrough(),n.addEventListener("shown.bs.offcanvas",()=>{expect(o._focustrap.activate).not.toHaveBeenCalled(),a()}),o.show()})}),describe("toggle",()=>{it("should call show method if show class is not present",()=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector(".offcanvas"),n=new Offcanvas(a);spyOn(n,"show"),n.toggle(),expect(n.show).toHaveBeenCalled()}),it("should call hide method if show class is present",()=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector(".offcanvas"),n=new Offcanvas(a);n.show(),expect(a.classList.contains("show")).toBe(!0),spyOn(n,"hide"),n.toggle(),expect(n.hide).toHaveBeenCalled()})}),describe("show",()=>{it("should do nothing if already shown",()=>{e.innerHTML='<div class="offcanvas show"></div>';const a=e.querySelector("div"),n=new Offcanvas(a);n.show(),expect(a.classList.contains("show")).toBe(!0),spyOn(n._backdrop,"show").and.callThrough(),spyOn(EventHandler,"trigger").and.callThrough(),n.show(),expect(EventHandler.trigger).not.toHaveBeenCalled(),expect(n._backdrop.show).not.toHaveBeenCalled()}),it("should show a hidden element",a=>{e.innerHTML='<div class="offcanvas"></div>';const n=e.querySelector("div"),o=new Offcanvas(n);spyOn(o._backdrop,"show").and.callThrough(),n.addEventListener("shown.bs.offcanvas",()=>{expect(n.classList.contains("show")).toEqual(!0),expect(o._backdrop.show).toHaveBeenCalled(),a()}),o.show()}),it("should not fire shown when show is prevented",a=>{e.innerHTML='<div class="offcanvas"></div>';const n=e.querySelector("div"),o=new Offcanvas(n);spyOn(o._backdrop,"show").and.callThrough();n.addEventListener("show.bs.offcanvas",e=>{e.preventDefault(),setTimeout(()=>{expect(o._backdrop.show).not.toHaveBeenCalled(),a()},10)}),n.addEventListener("shown.bs.offcanvas",()=>{throw new Error("should not fire shown event")}),o.show()}),it('on window load, should make visible an offcanvas element, if its markup contains class "show"',a=>{e.innerHTML='<div class="offcanvas show"></div>';const n=e.querySelector("div");spyOn(Offcanvas.prototype,"show").and.callThrough(),n.addEventListener("shown.bs.offcanvas",()=>{a()}),window.dispatchEvent(createEvent("load"));const o=Offcanvas.getInstance(n);expect(o).not.toBeNull(),expect(Offcanvas.prototype.show).toHaveBeenCalled()}),it("should trap focus",a=>{e.innerHTML='<div class="offcanvas"></div>';const n=e.querySelector(".offcanvas"),o=new Offcanvas(n);spyOn(o._focustrap,"activate").and.callThrough(),n.addEventListener("shown.bs.offcanvas",()=>{expect(o._focustrap.activate).toHaveBeenCalled(),a()}),o.show()})}),describe("hide",()=>{it("should do nothing if already shown",()=>{e.innerHTML='<div class="offcanvas"></div>',spyOn(EventHandler,"trigger").and.callThrough();const a=e.querySelector("div"),n=new Offcanvas(a);spyOn(n._backdrop,"hide").and.callThrough(),n.hide(),expect(n._backdrop.hide).not.toHaveBeenCalled(),expect(EventHandler.trigger).not.toHaveBeenCalled()}),it("should hide a shown element",a=>{e.innerHTML='<div class="offcanvas"></div>';const n=e.querySelector("div"),o=new Offcanvas(n);spyOn(o._backdrop,"hide").and.callThrough(),o.show(),n.addEventListener("hidden.bs.offcanvas",()=>{expect(n.classList.contains("show")).toEqual(!1),expect(o._backdrop.hide).toHaveBeenCalled(),a()}),o.hide()}),it("should not fire hidden when hide is prevented",a=>{e.innerHTML='<div class="offcanvas"></div>';const n=e.querySelector("div"),o=new Offcanvas(n);spyOn(o._backdrop,"hide").and.callThrough(),o.show();n.addEventListener("hide.bs.offcanvas",e=>{e.preventDefault(),setTimeout(()=>{expect(o._backdrop.hide).not.toHaveBeenCalled(),a()},10)}),n.addEventListener("hidden.bs.offcanvas",()=>{throw new Error("should not fire hidden event")}),o.hide()}),it("should release focus trap",a=>{e.innerHTML='<div class="offcanvas"></div>';const n=e.querySelector("div"),o=new Offcanvas(n);spyOn(o._focustrap,"deactivate").and.callThrough(),o.show(),n.addEventListener("hidden.bs.offcanvas",()=>{expect(o._focustrap.deactivate).toHaveBeenCalled(),a()}),o.hide()})}),describe("dispose",()=>{it("should dispose an offcanvas",()=>{e.innerHTML='<div class="offcanvas"></div>';const a=e.querySelector("div"),n=new Offcanvas(a),o=n._backdrop;spyOn(o,"dispose").and.callThrough();const t=n._focustrap;spyOn(t,"deactivate").and.callThrough(),expect(Offcanvas.getInstance(a)).toEqual(n),spyOn(EventHandler,"off"),n.dispose(),expect(o.dispose).toHaveBeenCalled(),expect(n._backdrop).toBeNull(),expect(t.deactivate).toHaveBeenCalled(),expect(n._focustrap).toBeNull(),expect(Offcanvas.getInstance(a)).toEqual(null)})}),describe("data-api",()=>{it("should not prevent event for input",a=>{e.innerHTML=['<input type="checkbox" data-bs-toggle="offcanvas" data-bs-target="#offcanvasdiv1" />','<div id="offcanvasdiv1" class="offcanvas"></div>'].join("");const n=e.querySelector("input"),o=e.querySelector("#offcanvasdiv1");o.addEventListener("shown.bs.offcanvas",()=>{expect(o.classList.contains("show")).toEqual(!0),expect(n.checked).toEqual(!0),a()}),n.click()}),it("should not call toggle on disabled elements",()=>{e.innerHTML=['<a href="#" data-bs-toggle="offcanvas" data-bs-target="#offcanvasdiv1" class="disabled"></a>','<div id="offcanvasdiv1" class="offcanvas"></div>'].join("");const a=e.querySelector("a");spyOn(Offcanvas.prototype,"toggle"),a.click(),expect(Offcanvas.prototype.toggle).not.toHaveBeenCalled()}),it("should call hide first, if another offcanvas is open",a=>{e.innerHTML=['<button id="btn2" data-bs-toggle="offcanvas" data-bs-target="#offcanvas2" ></button>','<div id="offcanvas1" class="offcanvas"></div>','<div id="offcanvas2" class="offcanvas"></div>'].join("");const n=e.querySelector("#btn2"),o=document.querySelector("#offcanvas1"),t=document.querySelector("#offcanvas2"),s=new Offcanvas(o);o.addEventListener("shown.bs.offcanvas",()=>{n.click()}),o.addEventListener("hidden.bs.offcanvas",()=>{expect(Offcanvas.getInstance(t)).not.toBeNull(),a()}),s.show()}),it("should focus on trigger element after closing offcanvas",a=>{e.innerHTML=['<button id="btn" data-bs-toggle="offcanvas" data-bs-target="#offcanvas" ></button>','<div id="offcanvas" class="offcanvas"></div>'].join("");const n=e.querySelector("#btn"),o=e.querySelector("#offcanvas"),t=new Offcanvas(o);spyOn(n,"focus"),o.addEventListener("shown.bs.offcanvas",()=>{t.hide()}),o.addEventListener("hidden.bs.offcanvas",()=>{setTimeout(()=>{expect(n.focus).toHaveBeenCalled(),a()},5)}),n.click()}),it("should not focus on trigger element after closing offcanvas, if it is not visible",a=>{e.innerHTML=['<button id="btn" data-bs-toggle="offcanvas" data-bs-target="#offcanvas" ></button>','<div id="offcanvas" class="offcanvas"></div>'].join("");const n=e.querySelector("#btn"),o=e.querySelector("#offcanvas"),t=new Offcanvas(o);spyOn(n,"focus"),o.addEventListener("shown.bs.offcanvas",()=>{n.style.display="none",t.hide()}),o.addEventListener("hidden.bs.offcanvas",()=>{setTimeout(()=>{expect(isVisible(n)).toBe(!1),expect(n.focus).not.toHaveBeenCalled(),a()},5)}),n.click()})}),describe("jQueryInterface",()=>{it("should create an offcanvas",()=>{e.innerHTML="<div></div>";const a=e.querySelector("div");jQueryMock.fn.offcanvas=Offcanvas.jQueryInterface,jQueryMock.elements=[a],jQueryMock.fn.offcanvas.call(jQueryMock),expect(Offcanvas.getInstance(a)).not.toBeNull()}),it("should not re create an offcanvas",()=>{e.innerHTML="<div></div>";const a=e.querySelector("div"),n=new Offcanvas(a);jQueryMock.fn.offcanvas=Offcanvas.jQueryInterface,jQueryMock.elements=[a],jQueryMock.fn.offcanvas.call(jQueryMock),expect(Offcanvas.getInstance(a)).toEqual(n)}),it("should throw error on undefined method",()=>{e.innerHTML="<div></div>";const a=e.querySelector("div");jQueryMock.fn.offcanvas=Offcanvas.jQueryInterface,jQueryMock.elements=[a],expect(()=>{jQueryMock.fn.offcanvas.call(jQueryMock,"undefinedMethod")}).toThrowError(TypeError,'No method named "undefinedMethod"')}),it("should throw error on protected method",()=>{e.innerHTML="<div></div>";const a=e.querySelector("div");jQueryMock.fn.offcanvas=Offcanvas.jQueryInterface,jQueryMock.elements=[a],expect(()=>{jQueryMock.fn.offcanvas.call(jQueryMock,"_getConfig")}).toThrowError(TypeError,'No method named "_getConfig"')}),it('should throw error if method "constructor" is being called',()=>{e.innerHTML="<div></div>";const a=e.querySelector("div");jQueryMock.fn.offcanvas=Offcanvas.jQueryInterface,jQueryMock.elements=[a],expect(()=>{jQueryMock.fn.offcanvas.call(jQueryMock,"constructor")}).toThrowError(TypeError,'No method named "constructor"')}),it("should call offcanvas method",()=>{e.innerHTML="<div></div>";const a=e.querySelector("div");spyOn(Offcanvas.prototype,"show"),jQueryMock.fn.offcanvas=Offcanvas.jQueryInterface,jQueryMock.elements=[a],jQueryMock.fn.offcanvas.call(jQueryMock,"show"),expect(Offcanvas.prototype.show).toHaveBeenCalled()}),it("should create a offcanvas with given config",()=>{e.innerHTML="<div></div>";const a=e.querySelector("div");jQueryMock.fn.offcanvas=Offcanvas.jQueryInterface,jQueryMock.elements=[a],jQueryMock.fn.offcanvas.call(jQueryMock,{scroll:!0});const n=Offcanvas.getInstance(a);expect(n).not.toBeNull(),expect(n._config.scroll).toBe(!0)})}),describe("getInstance",()=>{it("should return offcanvas instance",()=>{e.innerHTML="<div></div>";const a=e.querySelector("div"),n=new Offcanvas(a);expect(Offcanvas.getInstance(a)).toEqual(n),expect(Offcanvas.getInstance(a)).toBeInstanceOf(Offcanvas)}),it("should return null when there is no offcanvas instance",()=>{e.innerHTML="<div></div>";const a=e.querySelector("div");expect(Offcanvas.getInstance(a)).toBeNull()})}),describe("getOrCreateInstance",()=>{it("should return offcanvas instance",()=>{e.innerHTML="<div></div>";const a=e.querySelector("div"),n=new Offcanvas(a);expect(Offcanvas.getOrCreateInstance(a)).toEqual(n),expect(Offcanvas.getInstance(a)).toEqual(Offcanvas.getOrCreateInstance(a,{})),expect(Offcanvas.getOrCreateInstance(a)).toBeInstanceOf(Offcanvas)}),it("should return new instance when there is no Offcanvas instance",()=>{e.innerHTML="<div></div>";const a=e.querySelector("div");expect(Offcanvas.getInstance(a)).toEqual(null),expect(Offcanvas.getOrCreateInstance(a)).toBeInstanceOf(Offcanvas)}),it("should return new instance when there is no offcanvas instance with given configuration",()=>{e.innerHTML="<div></div>";const a=e.querySelector("div");expect(Offcanvas.getInstance(a)).toEqual(null);const n=Offcanvas.getOrCreateInstance(a,{scroll:!0});expect(n).toBeInstanceOf(Offcanvas),expect(n._config.scroll).toEqual(!0)}),it("should return the instance when exists without given configuration",()=>{e.innerHTML="<div></div>";const a=e.querySelector("div"),n=new Offcanvas(a,{scroll:!0});expect(Offcanvas.getInstance(a)).toEqual(n);const o=Offcanvas.getOrCreateInstance(a,{scroll:!1});expect(n).toBeInstanceOf(Offcanvas),expect(o).toEqual(n),expect(o._config.scroll).toEqual(!0)})})});