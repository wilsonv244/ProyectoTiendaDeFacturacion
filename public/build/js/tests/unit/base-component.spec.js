import BaseComponent from"../../src/base-component";import{clearFixture,getFixture}from"../helpers/fixture";import EventHandler from"../../src/dom/event-handler";import{noop}from"../../src/util";class DummyClass extends BaseComponent{constructor(e){super(e),EventHandler.on(this._element,"click"+DummyClass.EVENT_KEY,noop)}static get NAME(){return"dummy"}}describe("Base Component",()=>{let e;let t,s;const n=()=>{e.innerHTML='<div id="foo"></div>',t=e.querySelector("#foo"),s=new DummyClass(t)};beforeAll(()=>{e=getFixture()}),afterEach(()=>{clearFixture()}),describe("Static Methods",()=>{describe("VERSION",()=>{it("should return version",()=>{expect(typeof DummyClass.VERSION).toEqual("string")})}),describe("DATA_KEY",()=>{it("should return plugin data key",()=>{expect(DummyClass.DATA_KEY).toEqual("bs.dummy")})}),describe("NAME",()=>{it("should return plugin NAME",()=>{expect(DummyClass.NAME).toEqual("dummy")})}),describe("EVENT_KEY",()=>{it("should return plugin event key",()=>{expect(DummyClass.EVENT_KEY).toEqual(".bs.dummy")})})}),describe("Public Methods",()=>{describe("constructor",()=>{it("should accept element, either passed as a CSS selector or DOM element",()=>{e.innerHTML=['<div id="foo"></div>','<div id="bar"></div>'].join("");const t=e.querySelector("#foo"),s=new DummyClass(t),n=new DummyClass("#bar");expect(s._element).toEqual(t),expect(n._element).toEqual(e.querySelector("#bar"))})}),describe("dispose",()=>{it("should dispose an component",()=>{n(),expect(DummyClass.getInstance(t)).not.toBeNull(),s.dispose(),expect(DummyClass.getInstance(t)).toBeNull(),expect(s._element).toBeNull()}),it("should de-register element event listeners",()=>{n(),spyOn(EventHandler,"off"),s.dispose(),expect(EventHandler.off).toHaveBeenCalledWith(t,DummyClass.EVENT_KEY)})}),describe("getInstance",()=>{it("should return an instance",()=>{n(),expect(DummyClass.getInstance(t)).toEqual(s),expect(DummyClass.getInstance(t)).toBeInstanceOf(DummyClass)}),it("should accept element, either passed as a CSS selector, jQuery element, or DOM element",()=>{n(),expect(DummyClass.getInstance("#foo")).toEqual(s),expect(DummyClass.getInstance(t)).toEqual(s);const e={0:t,jquery:"foo"};expect(DummyClass.getInstance(e)).toEqual(s)}),it("should return null when there is no instance",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");expect(DummyClass.getInstance(t)).toEqual(null)})}),describe("getOrCreateInstance",()=>{it("should return an instance",()=>{n(),expect(DummyClass.getOrCreateInstance(t)).toEqual(s),expect(DummyClass.getInstance(t)).toEqual(DummyClass.getOrCreateInstance(t,{})),expect(DummyClass.getOrCreateInstance(t)).toBeInstanceOf(DummyClass)}),it("should return new instance when there is no alert instance",()=>{e.innerHTML='<div id="foo"></div>',t=e.querySelector("#foo"),expect(DummyClass.getInstance(t)).toEqual(null),expect(DummyClass.getOrCreateInstance(t)).toBeInstanceOf(DummyClass)})})})});