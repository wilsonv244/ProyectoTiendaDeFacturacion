import ScrollSpy from"../../src/scrollspy";import Manipulator from"../../src/dom/manipulator";import{getFixture,clearFixture,createEvent,jQueryMock}from"../helpers/fixture";describe("ScrollSpy",()=>{let e;const t=({elementSelector:t,targetSelector:i,contentEl:l,scrollSpy:n,spy:a,cb:o})=>{const s=e.querySelector(t),r=e.querySelector(i),c=Math.ceil(l.scrollTop+Manipulator.position(r).top)+5;l.addEventListener("scroll",(function e(){expect(s.classList.contains("active")).toEqual(!0),l.removeEventListener("scroll",e),expect(n._process).toHaveBeenCalled(),a.calls.reset(),o()})),l.scrollTop=c};beforeAll(()=>{e=getFixture()}),afterEach(()=>{clearFixture()}),describe("VERSION",()=>{it("should return plugin version",()=>{expect(ScrollSpy.VERSION).toEqual(jasmine.any(String))})}),describe("Default",()=>{it("should return plugin default config",()=>{expect(ScrollSpy.Default).toEqual(jasmine.any(Object))})}),describe("DATA_KEY",()=>{it("should return plugin data key",()=>{expect(ScrollSpy.DATA_KEY).toEqual("bs.scrollspy")})}),describe("constructor",()=>{it("should take care of element either passed as a CSS selector or DOM element",()=>{e.innerHTML='<nav id="navigation"></nav><div class="content"></div>';const t=e.querySelector("#navigation"),i=new ScrollSpy("#navigation"),l=new ScrollSpy(t);expect(i._element).toEqual(t),expect(l._element).toEqual(t)}),it("should not process element without target",()=>{e.innerHTML=['<nav id="navigation" class="navbar">','  <ul class="navbar-nav">','    <li class="nav-item"><a class="nav-link active" id="one-link" href="#">One</a></li>','    <li class="nav-item"><a class="nav-link" id="two-link" href="#two">Two</a></li>','    <li class="nav-item"><a class="nav-link" id="three-link" href="#three">Three</a></li>',"  </ul>","</nav>",'<div id="content" style="height: 200px; overflow-y: auto;">',' <div id="two" style="height: 300px;"></div>',' <div id="three" style="height: 10px;"></div>',"</div>"].join("");const t=new ScrollSpy(e.querySelector("#content"),{target:"#navigation"});expect(t._targets.length).toEqual(2)}),it('should only switch "active" class on current target',t=>{e.innerHTML=['<div id="root" class="active" style="display: block">','  <div class="topbar">','    <div class="topbar-inner">','      <div class="container" id="ss-target">','        <ul class="nav">','          <li class="nav-item"><a href="#masthead">Overview</a></li>','          <li class="nav-item"><a href="#detail">Detail</a></li>',"        </ul>","      </div>","    </div>","  </div>",'  <div id="scrollspy-example" style="height: 100px; overflow: auto;">','    <div style="height: 200px;">','      <h4 id="masthead">Overview</h4>','      <p style="height: 200px;"></p>',"    </div>",'    <div style="height: 200px;">','      <h4 id="detail">Detail</h4>','      <p style="height: 200px;"></p>',"    </div>","  </div>","</div>"].join("");const i=e.querySelector("#scrollspy-example"),l=e.querySelector("#root"),n=new ScrollSpy(i,{target:"ss-target"});spyOn(n,"_process").and.callThrough(),i.addEventListener("scroll",()=>{expect(l.classList.contains("active")).toEqual(!0),expect(n._process).toHaveBeenCalled(),t()}),i.scrollTop=350}),it('should only switch "active" class on current target specified w element',t=>{e.innerHTML=['<div id="root" class="active" style="display: block">','  <div class="topbar">','    <div class="topbar-inner">','      <div class="container" id="ss-target">','        <ul class="nav">','          <li class="nav-item"><a href="#masthead">Overview</a></li>','          <li class="nav-item"><a href="#detail">Detail</a></li>',"        </ul>","      </div>","    </div>","  </div>",'  <div id="scrollspy-example" style="height: 100px; overflow: auto;">','    <div style="height: 200px;">','      <h4 id="masthead">Overview</h4>','      <p style="height: 200px;"></p>',"    </div>",'    <div style="height: 200px;">','      <h4 id="detail">Detail</h4>','      <p style="height: 200px;"></p>',"    </div>","  </div>","</div>"].join("");const i=e.querySelector("#scrollspy-example"),l=e.querySelector("#root"),n=new ScrollSpy(i,{target:e.querySelector("#ss-target")});spyOn(n,"_process").and.callThrough(),i.addEventListener("scroll",()=>{expect(l.classList.contains("active")).toEqual(!0),expect(n._process).toHaveBeenCalled(),t()}),i.scrollTop=350}),it("should correctly select middle navigation option when large offset is used",t=>{e.innerHTML=['<div id="header" style="height: 500px;"></div>','<nav id="navigation" class="navbar">',' <ul class="navbar-nav">','   <li class="nav-item"><a class="nav-link active" id="one-link" href="#one">One</a></li>','   <li class="nav-item"><a class="nav-link" id="two-link" href="#two">Two</a></li>','   <li class="nav-item"><a class="nav-link" id="three-link" href="#three">Three</a></li>'," </ul>","</nav>",'<div id="content" style="height: 200px; overflow-y: auto;">',' <div id="one" style="height: 500px;"></div>',' <div id="two" style="height: 300px;"></div>',' <div id="three" style="height: 10px;"></div>',"</div>"].join("");const i=e.querySelector("#content"),l=new ScrollSpy(i,{target:"#navigation",offset:Manipulator.position(i).top});spyOn(l,"_process").and.callThrough(),i.addEventListener("scroll",()=>{expect(e.querySelector("#one-link").classList.contains("active")).toEqual(!1),expect(e.querySelector("#two-link").classList.contains("active")).toEqual(!0),expect(e.querySelector("#three-link").classList.contains("active")).toEqual(!1),expect(l._process).toHaveBeenCalled(),t()}),i.scrollTop=550}),it("should add the active class to the correct element",i=>{e.innerHTML=['<nav class="navbar">','  <ul class="nav">','    <li class="nav-item"><a class="nav-link" id="a-1" href="#div-1">div 1</a></li>','    <li class="nav-item"><a class="nav-link" id="a-2" href="#div-2">div 2</a></li>',"  </ul>","</nav>",'<div class="content" style="overflow: auto; height: 50px">','  <div id="div-1" style="height: 100px; padding: 0; margin: 0">div 1</div>','  <div id="div-2" style="height: 200px; padding: 0; margin: 0">div 2</div>',"</div>"].join("");const l=e.querySelector(".content"),n=new ScrollSpy(l,{offset:0,target:".navbar"}),a=spyOn(n,"_process").and.callThrough();t({elementSelector:"#a-1",targetSelector:"#div-1",contentEl:l,scrollSpy:n,spy:a,cb:()=>{t({elementSelector:"#a-2",targetSelector:"#div-2",contentEl:l,scrollSpy:n,spy:a,cb:()=>i()})}})}),it("should add the active class to the correct element (nav markup)",i=>{e.innerHTML=['<nav class="navbar">','  <nav class="nav">','    <a class="nav-link" id="a-1" href="#div-1">div 1</a>','    <a class="nav-link" id="a-2" href="#div-2">div 2</a>',"  </nav>","</nav>",'<div class="content" style="overflow: auto; height: 50px">','  <div id="div-1" style="height: 100px; padding: 0; margin: 0">div 1</div>','  <div id="div-2" style="height: 200px; padding: 0; margin: 0">div 2</div>',"</div>"].join("");const l=e.querySelector(".content"),n=new ScrollSpy(l,{offset:0,target:".navbar"}),a=spyOn(n,"_process").and.callThrough();t({elementSelector:"#a-1",targetSelector:"#div-1",contentEl:l,scrollSpy:n,spy:a,cb:()=>{t({elementSelector:"#a-2",targetSelector:"#div-2",contentEl:l,scrollSpy:n,spy:a,cb:()=>i()})}})}),it("should add the active class to the correct element (list-group markup)",i=>{e.innerHTML=['<nav class="navbar">','  <div class="list-group">','    <a class="list-group-item" id="a-1" href="#div-1">div 1</a>','    <a class="list-group-item" id="a-2" href="#div-2">div 2</a>',"  </div>","</nav>",'<div class="content" style="overflow: auto; height: 50px">','  <div id="div-1" style="height: 100px; padding: 0; margin: 0">div 1</div>','  <div id="div-2" style="height: 200px; padding: 0; margin: 0">div 2</div>',"</div>"].join("");const l=e.querySelector(".content"),n=new ScrollSpy(l,{offset:0,target:".navbar"}),a=spyOn(n,"_process").and.callThrough();t({elementSelector:"#a-1",targetSelector:"#div-1",contentEl:l,scrollSpy:n,spy:a,cb:()=>{t({elementSelector:"#a-2",targetSelector:"#div-2",contentEl:l,scrollSpy:n,spy:a,cb:()=>i()})}})}),it("should clear selection if above the first section",t=>{e.innerHTML=['<div id="header" style="height: 500px;"></div>','<nav id="navigation" class="navbar">','  <ul class="navbar-nav">','    <li class="nav-item"><a id="one-link"   class="nav-link active" href="#one">One</a></li>','    <li class="nav-item"><a id="two-link"   class="nav-link" href="#two">Two</a></li>','    <li class="nav-item"><a id="three-link" class="nav-link" href="#three">Three</a></li>',"  </ul>","</nav>",'<div id="content" style="height: 200px; overflow-y: auto;">','  <div id="spacer" style="height: 100px;"></div>','  <div id="one" style="height: 100px;"></div>','  <div id="two" style="height: 100px;"></div>','  <div id="three" style="height: 100px;"></div>','  <div id="spacer" style="height: 100px;"></div>',"</div>"].join("");const i=e.querySelector("#content"),l=new ScrollSpy(i,{target:"#navigation",offset:Manipulator.position(i).top}),n=spyOn(l,"_process").and.callThrough();let a=!0;i.addEventListener("scroll",()=>{const l=e.querySelector(".active");expect(n).toHaveBeenCalled(),n.calls.reset(),a?(expect(e.querySelectorAll(".active").length).toEqual(1),expect(l.getAttribute("id")).toEqual("two-link"),a=!1,i.scrollTop=0):(expect(l).toBeNull(),t())}),i.scrollTop=201}),it("should not clear selection if above the first section and first section is at the top",t=>{e.innerHTML=['<div id="header" style="height: 500px;"></div>','<nav id="navigation" class="navbar">','  <ul class="navbar-nav">','    <li class="nav-item"><a id="one-link" class="nav-link active" href="#one">One</a></li>','    <li class="nav-item"><a id="two-link" class="nav-link" href="#two">Two</a></li>','    <li class="nav-item"><a id="three-link" class="nav-link" href="#three">Three</a></li>',"  </ul>","</nav>",'<div id="content" style="height: 200px; overflow-y: auto;">','  <div id="one" style="height: 100px;"></div>','  <div id="two" style="height: 100px;"></div>','  <div id="three" style="height: 100px;"></div>','  <div id="spacer" style="height: 100px;"></div>',"</div>"].join("");const i=e.querySelector("#content"),l=new ScrollSpy(i,{target:"#navigation",offset:i.offsetTop}),n=spyOn(l,"_process").and.callThrough();let a=!0;i.addEventListener("scroll",()=>{const l=e.querySelector(".active");expect(n).toHaveBeenCalled(),n.calls.reset(),a?(expect(e.querySelectorAll(".active").length).toEqual(1),expect(l.getAttribute("id")).toEqual("two-link"),a=!1,i.scrollTop=-10):(expect(e.querySelectorAll(".active").length).toEqual(1),expect(l.getAttribute("id")).toEqual("one-link"),t())}),i.scrollTop=101}),it("should correctly select navigation element on backward scrolling when each target section height is 100%",i=>{e.innerHTML=['<nav class="navbar">','  <ul class="nav">','    <li class="nav-item"><a id="li-100-1" class="nav-link" href="#div-100-1">div 1</a></li>','    <li class="nav-item"><a id="li-100-2" class="nav-link" href="#div-100-2">div 2</a></li>','    <li class="nav-item"><a id="li-100-3" class="nav-link" href="#div-100-3">div 3</a></li>','    <li class="nav-item"><a id="li-100-4" class="nav-link" href="#div-100-4">div 4</a></li>','    <li class="nav-item"><a id="li-100-5" class="nav-link" href="#div-100-5">div 5</a></li>',"  </ul>","</nav>",'<div class="content" style="position: relative; overflow: auto; height: 100px">','  <div id="div-100-1" style="position: relative; height: 100%; padding: 0; margin: 0">div 1</div>','  <div id="div-100-2" style="position: relative; height: 100%; padding: 0; margin: 0">div 2</div>','  <div id="div-100-3" style="position: relative; height: 100%; padding: 0; margin: 0">div 3</div>','  <div id="div-100-4" style="position: relative; height: 100%; padding: 0; margin: 0">div 4</div>','  <div id="div-100-5" style="position: relative; height: 100%; padding: 0; margin: 0">div 5</div>',"</div>"].join("");const l=e.querySelector(".content"),n=new ScrollSpy(l,{offset:0,target:".navbar"}),a=spyOn(n,"_process").and.callThrough();t({elementSelector:"#li-100-5",targetSelector:"#div-100-5",scrollSpy:n,spy:a,contentEl:l,cb(){l.scrollTop=0,t({elementSelector:"#li-100-4",targetSelector:"#div-100-4",scrollSpy:n,spy:a,contentEl:l,cb(){l.scrollTop=0,t({elementSelector:"#li-100-3",targetSelector:"#div-100-3",scrollSpy:n,spy:a,contentEl:l,cb(){l.scrollTop=0,t({elementSelector:"#li-100-2",targetSelector:"#div-100-2",scrollSpy:n,spy:a,contentEl:l,cb(){l.scrollTop=0,t({elementSelector:"#li-100-1",targetSelector:"#div-100-1",scrollSpy:n,spy:a,contentEl:l,cb:i})}})}})}})}})}),it("should allow passed in option offset method: offset",()=>{e.innerHTML=['<nav class="navbar">','  <ul class="nav">','    <li class="nav-item"><a id="li-jsm-1" class="nav-link" href="#div-jsm-1">div 1</a></li>','    <li class="nav-item"><a id="li-jsm-2" class="nav-link" href="#div-jsm-2">div 2</a></li>','    <li class="nav-item"><a id="li-jsm-3" class="nav-link" href="#div-jsm-3">div 3</a></li>',"  </ul>","</nav>",'<div class="content"  style="position: relative; overflow: auto; height: 100px">','  <div id="div-jsm-1" style="position: relative; height: 200px; padding: 0; margin: 0">div 1</div>','  <div id="div-jsm-2" style="position: relative; height: 150px; padding: 0; margin: 0">div 2</div>','  <div id="div-jsm-3" style="position: relative; height: 250px; padding: 0; margin: 0">div 3</div>',"</div>"].join("");const t=e.querySelector(".content"),i=e.querySelector("#div-jsm-2"),l=new ScrollSpy(t,{target:".navbar",offset:0,method:"offset"});expect(l._offsets[1]).toEqual(Manipulator.offset(i).top),expect(l._offsets[1]).not.toEqual(Manipulator.position(i).top)}),it("should allow passed in option offset method: position",()=>{e.innerHTML=['<nav class="navbar">','  <ul class="nav">','    <li class="nav-item"><a id="li-jsm-1" class="nav-link" href="#div-jsm-1">div 1</a></li>','    <li class="nav-item"><a id="li-jsm-2" class="nav-link" href="#div-jsm-2">div 2</a></li>','    <li class="nav-item"><a id="li-jsm-3" class="nav-link" href="#div-jsm-3">div 3</a></li>',"  </ul>","</nav>",'<div class="content"  style="position: relative; overflow: auto; height: 100px">','  <div id="div-jsm-1" style="position: relative; height: 200px; padding: 0; margin: 0">div 1</div>','  <div id="div-jsm-2" style="position: relative; height: 150px; padding: 0; margin: 0">div 2</div>','  <div id="div-jsm-3" style="position: relative; height: 250px; padding: 0; margin: 0">div 3</div>',"</div>"].join("");const t=e.querySelector(".content"),i=e.querySelector("#div-jsm-2"),l=new ScrollSpy(t,{target:".navbar",offset:0,method:"position"});expect(l._offsets[1]).not.toEqual(Manipulator.offset(i).top),expect(l._offsets[1]).toEqual(Manipulator.position(i).top)})}),describe("dispose",()=>{it("should dispose a scrollspy",()=>{e.innerHTML='<div style="display: none;"></div>';const t=e.querySelector("div");spyOn(t,"addEventListener").and.callThrough(),spyOn(t,"removeEventListener").and.callThrough();const i=new ScrollSpy(t);expect(t.addEventListener).toHaveBeenCalledWith("scroll",jasmine.any(Function),jasmine.any(Boolean)),i.dispose(),expect(t.removeEventListener).toHaveBeenCalledWith("scroll",jasmine.any(Function),jasmine.any(Boolean))})}),describe("jQueryInterface",()=>{it("should create a scrollspy",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");jQueryMock.fn.scrollspy=ScrollSpy.jQueryInterface,jQueryMock.elements=[t],jQueryMock.fn.scrollspy.call(jQueryMock),expect(ScrollSpy.getInstance(t)).not.toBeNull()}),it("should create a scrollspy with given config",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");jQueryMock.fn.scrollspy=ScrollSpy.jQueryInterface,jQueryMock.elements=[t],jQueryMock.fn.scrollspy.call(jQueryMock,{offset:15}),spyOn(ScrollSpy.prototype,"constructor"),expect(ScrollSpy.prototype.constructor).not.toHaveBeenCalledWith(t,{offset:15});const i=ScrollSpy.getInstance(t);expect(i).not.toBeNull(),expect(i._config.offset).toBe(15)}),it("should not re create a scrollspy",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),i=new ScrollSpy(t);jQueryMock.fn.scrollspy=ScrollSpy.jQueryInterface,jQueryMock.elements=[t],jQueryMock.fn.scrollspy.call(jQueryMock),expect(ScrollSpy.getInstance(t)).toEqual(i)}),it("should call a scrollspy method",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),i=new ScrollSpy(t);spyOn(i,"refresh"),jQueryMock.fn.scrollspy=ScrollSpy.jQueryInterface,jQueryMock.elements=[t],jQueryMock.fn.scrollspy.call(jQueryMock,"refresh"),expect(ScrollSpy.getInstance(t)).toEqual(i),expect(i.refresh).toHaveBeenCalled()}),it("should throw error on undefined method",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");jQueryMock.fn.scrollspy=ScrollSpy.jQueryInterface,jQueryMock.elements=[t],expect(()=>{jQueryMock.fn.scrollspy.call(jQueryMock,"undefinedMethod")}).toThrowError(TypeError,'No method named "undefinedMethod"')})}),describe("getInstance",()=>{it("should return scrollspy instance",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),i=new ScrollSpy(t);expect(ScrollSpy.getInstance(t)).toEqual(i),expect(ScrollSpy.getInstance(t)).toBeInstanceOf(ScrollSpy)}),it("should return null if there is no instance",()=>{expect(ScrollSpy.getInstance(e)).toEqual(null)})}),describe("getOrCreateInstance",()=>{it("should return scrollspy instance",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),i=new ScrollSpy(t);expect(ScrollSpy.getOrCreateInstance(t)).toEqual(i),expect(ScrollSpy.getInstance(t)).toEqual(ScrollSpy.getOrCreateInstance(t,{})),expect(ScrollSpy.getOrCreateInstance(t)).toBeInstanceOf(ScrollSpy)}),it("should return new instance when there is no scrollspy instance",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");expect(ScrollSpy.getInstance(t)).toEqual(null),expect(ScrollSpy.getOrCreateInstance(t)).toBeInstanceOf(ScrollSpy)}),it("should return new instance when there is no scrollspy instance with given configuration",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");expect(ScrollSpy.getInstance(t)).toEqual(null);const i=ScrollSpy.getOrCreateInstance(t,{offset:1});expect(i).toBeInstanceOf(ScrollSpy),expect(i._config.offset).toEqual(1)}),it("should return the instance when exists without given configuration",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),i=new ScrollSpy(t,{offset:1});expect(ScrollSpy.getInstance(t)).toEqual(i);const l=ScrollSpy.getOrCreateInstance(t,{offset:2});expect(i).toBeInstanceOf(ScrollSpy),expect(l).toEqual(i),expect(l._config.offset).toEqual(1)})}),describe("event handler",()=>{it("should create scrollspy on window load event",()=>{e.innerHTML='<div data-bs-spy="scroll"></div>';const t=e.querySelector("div");window.dispatchEvent(createEvent("load")),expect(ScrollSpy.getInstance(t)).not.toBeNull()})})});