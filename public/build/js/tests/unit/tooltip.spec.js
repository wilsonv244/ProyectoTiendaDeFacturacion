import Tooltip from"../../src/tooltip";import EventHandler from"../../src/dom/event-handler";import{noop}from"../../src/util/index";import{clearFixture,createEvent,getFixture,jQueryMock}from"../helpers/fixture";describe("Tooltip",()=>{let e;beforeAll(()=>{e=getFixture()}),afterEach(()=>{clearFixture(),document.querySelectorAll(".tooltip").forEach(e=>{e.remove()})}),describe("VERSION",()=>{it("should return plugin version",()=>{expect(Tooltip.VERSION).toEqual(jasmine.any(String))})}),describe("Default",()=>{it("should return plugin default config",()=>{expect(Tooltip.Default).toEqual(jasmine.any(Object))})}),describe("NAME",()=>{it("should return plugin name",()=>{expect(Tooltip.NAME).toEqual(jasmine.any(String))})}),describe("DATA_KEY",()=>{it("should return plugin data key",()=>{expect(Tooltip.DATA_KEY).toEqual("bs.tooltip")})}),describe("Event",()=>{it("should return plugin events",()=>{expect(Tooltip.Event).toEqual(jasmine.any(Object))})}),describe("EVENT_KEY",()=>{it("should return plugin event key",()=>{expect(Tooltip.EVENT_KEY).toEqual(".bs.tooltip")})}),describe("DefaultType",()=>{it("should return plugin default type",()=>{expect(Tooltip.DefaultType).toEqual(jasmine.any(Object))})}),describe("constructor",()=>{it("should take care of element either passed as a CSS selector or DOM element",()=>{e.innerHTML='<a href="#" id="tooltipEl" rel="tooltip" title="Nice and short title">';const t=e.querySelector("#tooltipEl"),o=new Tooltip("#tooltipEl"),n=new Tooltip(t);expect(o._element).toEqual(t),expect(n._element).toEqual(t)}),it("should not take care of disallowed data attributes",()=>{e.innerHTML='<a href="#" rel="tooltip" data-bs-sanitize="false" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t);expect(o._config.sanitize).toEqual(!0)}),it("should convert title and content to string if numbers",()=>{e.innerHTML='<a href="#" rel="tooltip">';const t=e.querySelector("a"),o=new Tooltip(t,{title:1,content:7});expect(o._config.title).toEqual("1"),expect(o._config.content).toEqual("7")}),it("should enable selector delegation",t=>{e.innerHTML="<div></div>";const o=e.querySelector("div"),n=new Tooltip(o,{selector:'a[rel="tooltip"]',trigger:"click"});o.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const l=o.querySelector("a");l.addEventListener("shown.bs.tooltip",()=>{expect(document.querySelector(".tooltip")).not.toBeNull(),n.dispose(),t()}),l.click()}),it("should create offset modifier when offset is passed as a function",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Offset from function">';const o=jasmine.createSpy("getOffset").and.returnValue([10,20]),n=e.querySelector("a"),l=new Tooltip(n,{offset:o,popperConfig:{onFirstUpdate:e=>{expect(o).toHaveBeenCalledWith({popper:e.rects.popper,reference:e.rects.reference,placement:e.placement},n),t()}}}),i=l._getOffset();expect(typeof i).toEqual("function"),l.show()}),it("should create offset modifier when offset option is passed in data attribute",()=>{e.innerHTML='<a href="#" rel="tooltip" data-bs-offset="10,20" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t);expect(o._getOffset()).toEqual([10,20])}),it("should allow to pass config to Popper with `popperConfig`",()=>{e.innerHTML='<a href="#" rel="tooltip">';const t=e.querySelector("a"),o=new Tooltip(t,{popperConfig:{placement:"left"}})._getPopperConfig("top");expect(o.placement).toEqual("left")}),it("should allow to pass config to Popper with `popperConfig` as a function",()=>{e.innerHTML='<a href="#" rel="tooltip">';const t=e.querySelector("a"),o=jasmine.createSpy("getPopperConfig").and.returnValue({placement:"left"}),n=new Tooltip(t,{popperConfig:o})._getPopperConfig("top");expect(o).toHaveBeenCalled(),expect(n.placement).toEqual("left")})}),describe("enable",()=>{it("should enable a tooltip",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o);n.enable(),o.addEventListener("shown.bs.tooltip",()=>{expect(document.querySelector(".tooltip")).not.toBeNull(),t()}),n.show()})}),describe("disable",()=>{it("should disable tooltip",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o);n.disable(),o.addEventListener("show.bs.tooltip",()=>{throw new Error("should not show a disabled tooltip")}),n.show(),setTimeout(()=>{expect().nothing(),t()},10)})}),describe("toggleEnabled",()=>{it("should toggle enabled",()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t);expect(o._isEnabled).toEqual(!0),o.toggleEnabled(),expect(o._isEnabled).toEqual(!1)})}),describe("toggle",()=>{it("should do nothing if disabled",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o);n.disable(),o.addEventListener("show.bs.tooltip",()=>{throw new Error("should not show a disabled tooltip")}),n.toggle(),setTimeout(()=>{expect().nothing(),t()},10)}),it("should show a tooltip",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o);o.addEventListener("shown.bs.tooltip",()=>{expect(document.querySelector(".tooltip")).not.toBeNull(),t()}),n.toggle()}),it('should call toggle and show the tooltip when trigger is "click"',t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o,{trigger:"click"});spyOn(n,"toggle").and.callThrough(),o.addEventListener("shown.bs.tooltip",()=>{expect(n.toggle).toHaveBeenCalled(),t()}),o.click()}),it("should hide a tooltip",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o);o.addEventListener("shown.bs.tooltip",()=>{n.toggle()}),o.addEventListener("hidden.bs.tooltip",()=>{expect(document.querySelector(".tooltip")).toBeNull(),t()}),n.toggle()}),it('should call toggle and hide the tooltip when trigger is "click"',t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o,{trigger:"click"});spyOn(n,"toggle").and.callThrough(),o.addEventListener("shown.bs.tooltip",()=>{o.click()}),o.addEventListener("hidden.bs.tooltip",()=>{expect(n.toggle).toHaveBeenCalled(),t()}),o.click()})}),describe("dispose",()=>{it("should destroy a tooltip",()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=spyOn(t,"addEventListener").and.callThrough(),n=spyOn(t,"removeEventListener").and.callThrough(),l=new Tooltip(t);expect(Tooltip.getInstance(t)).toEqual(l);const i=[["mouseover",jasmine.any(Function),jasmine.any(Boolean)],["mouseout",jasmine.any(Function),jasmine.any(Boolean)],["focusin",jasmine.any(Function),jasmine.any(Boolean)],["focusout",jasmine.any(Function),jasmine.any(Boolean)]];expect(o.calls.allArgs()).toEqual(i),l.dispose(),expect(Tooltip.getInstance(t)).toEqual(null),expect(n.calls.allArgs()).toEqual(i)}),it("should destroy a tooltip after it is shown and hidden",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o);o.addEventListener("shown.bs.tooltip",()=>{n.hide()}),o.addEventListener("hidden.bs.tooltip",()=>{n.dispose(),expect(n.tip).toEqual(null),expect(Tooltip.getInstance(o)).toEqual(null),t()}),n.show()}),it("should destroy a tooltip and remove it from the dom",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o);o.addEventListener("shown.bs.tooltip",()=>{expect(document.querySelector(".tooltip")).not.toBeNull(),n.dispose(),expect(document.querySelector(".tooltip")).toBeNull(),t()}),n.show()})}),describe("show",()=>{it("should show a tooltip",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o);o.addEventListener("shown.bs.tooltip",()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(o.getAttribute("aria-describedby")).toEqual(e.getAttribute("id")),expect(e.getAttribute("id")).toContain("tooltip"),t()}),n.show()}),it("should show a tooltip when hovering a children element",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip"><svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 100 100"><rect width="100%" fill="#563d7c"/><circle cx="50" cy="50" r="30" fill="#fff"/></svg></a>';const o=e.querySelector("a"),n=new Tooltip(o);spyOn(n,"show"),o.querySelector("rect").dispatchEvent(createEvent("mouseover",{bubbles:!0})),setTimeout(()=>{expect(n.show).toHaveBeenCalled(),t()},0)}),it("should show a tooltip on mobile",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o);document.documentElement.ontouchstart=noop,spyOn(EventHandler,"on").and.callThrough(),o.addEventListener("shown.bs.tooltip",()=>{expect(document.querySelector(".tooltip")).not.toBeNull(),expect(EventHandler.on).toHaveBeenCalledWith(jasmine.any(Object),"mouseover",noop),document.documentElement.ontouchstart=void 0,t()}),n.show()}),it("should show a tooltip relative to placement option",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o,{placement:"bottom"});o.addEventListener("inserted.bs.tooltip",()=>{expect(n.getTipElement().classList.contains("bs-tooltip-bottom")).toEqual(!0)}),o.addEventListener("shown.bs.tooltip",()=>{const e=document.querySelector(".tooltip");expect(e.classList.contains("bs-tooltip-bottom")).toEqual(!0),t()}),n.show()}),it("should not error when trying to show a tooltip that has been removed from the dom",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o),l=()=>{o.removeEventListener("shown.bs.tooltip",l);let e=document.querySelector(".tooltip");e.remove(),o.addEventListener("shown.bs.tooltip",()=>{e=document.querySelector(".tooltip"),expect(e).not.toBeNull(),t()}),n.show()};o.addEventListener("shown.bs.tooltip",l),n.show()}),it("should show a tooltip with a dom element container",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o,{container:e});o.addEventListener("shown.bs.tooltip",()=>{expect(e.querySelector(".tooltip")).not.toBeNull(),t()}),n.show()}),it("should show a tooltip with a jquery element container",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o,{container:{0:e,jquery:"jQuery"}});o.addEventListener("shown.bs.tooltip",()=>{expect(e.querySelector(".tooltip")).not.toBeNull(),t()}),n.show()}),it("should show a tooltip with a selector in container",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o,{container:"#fixture"});o.addEventListener("shown.bs.tooltip",()=>{expect(e.querySelector(".tooltip")).not.toBeNull(),t()}),n.show()}),it("should show a tooltip with placement as a function",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=jasmine.createSpy("placement").and.returnValue("top"),n=e.querySelector("a"),l=new Tooltip(n,{placement:o});n.addEventListener("shown.bs.tooltip",()=>{expect(document.querySelector(".tooltip")).not.toBeNull(),expect(o).toHaveBeenCalled(),t()}),l.show()}),it("should show a tooltip without the animation",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o,{animation:!1});o.addEventListener("shown.bs.tooltip",()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(e.classList.contains("fade")).toEqual(!1),t()}),n.show()}),it("should throw an error the element is not visible",()=>{e.innerHTML='<a href="#" style="display: none" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t);try{o.show()}catch(e){expect(e.message).toEqual("Please use show on visible elements")}}),it("should not show a tooltip if show.bs.tooltip is prevented",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o);o.addEventListener("show.bs.tooltip",e=>{e.preventDefault(),setTimeout(()=>{expect(document.querySelector(".tooltip")).toBeNull(),t()},10)}),o.addEventListener("shown.bs.tooltip",()=>{throw new Error("Tooltip should not be shown")}),n.show()}),it("should show tooltip if leave event hasn't occurred before delay expires",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o,{delay:150});spyOn(n,"show"),setTimeout(()=>{expect(n.show).not.toHaveBeenCalled()},100),setTimeout(()=>{expect(n.show).toHaveBeenCalled(),t()},200),o.dispatchEvent(createEvent("mouseover"))}),it("should not show tooltip if leave event occurs before delay expires",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o,{delay:150});spyOn(n,"show"),setTimeout(()=>{expect(n.show).not.toHaveBeenCalled(),o.dispatchEvent(createEvent("mouseover"))},100),setTimeout(()=>{expect(n.show).toHaveBeenCalled(),expect(document.querySelectorAll(".tooltip").length).toEqual(0),t()},200),o.dispatchEvent(createEvent("mouseover"))}),it("should not hide tooltip if leave event occurs and enter event occurs within the hide delay",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o,{delay:{show:0,hide:150}});setTimeout(()=>{expect(n.getTipElement().classList.contains("show")).toEqual(!0),o.dispatchEvent(createEvent("mouseout")),setTimeout(()=>{expect(n.getTipElement().classList.contains("show")).toEqual(!0),o.dispatchEvent(createEvent("mouseover"))},100),setTimeout(()=>{expect(n.getTipElement().classList.contains("show")).toEqual(!0),t()},200)},0),o.dispatchEvent(createEvent("mouseover"))}),it("should not hide tooltip if leave event occurs and interaction remains inside trigger",t=>{e.innerHTML=['<a href="#" rel="tooltip" title="Another tooltip">',"<b>Trigger</b>","the tooltip","</a>"];const o=e.querySelector("a"),n=new Tooltip(o),l=o.querySelector("b");spyOn(n,"hide").and.callThrough(),o.addEventListener("mouseover",()=>{const e=createEvent("mouseout");Object.defineProperty(e,"relatedTarget",{value:l}),o.dispatchEvent(e)}),o.addEventListener("mouseout",()=>{expect(n.hide).not.toHaveBeenCalled(),t()}),o.dispatchEvent(createEvent("mouseover"))}),it("should properly maintain tooltip state if leave event occurs and enter event occurs during hide transition",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip" data-bs-placement="top" style="position:fixed;left:50%;top:50%;">Trigger</a>';const o=e.querySelector("a"),n=new Tooltip(o);spyOn(window,"getComputedStyle").and.returnValue({transitionDuration:"0.15s",transitionDelay:"0s"}),setTimeout(()=>{expect(n._popper).not.toBeNull(),expect(n.getTipElement().getAttribute("data-popper-placement")).toBe("top"),o.dispatchEvent(createEvent("mouseout")),setTimeout(()=>{expect(n.getTipElement().classList.contains("show")).toEqual(!1),o.dispatchEvent(createEvent("mouseover"))},100),setTimeout(()=>{expect(n._popper).not.toBeNull(),expect(n.getTipElement().getAttribute("data-popper-placement")).toBe("top"),t()},200)},0),o.dispatchEvent(createEvent("mouseover"))}),it("should only trigger inserted event if a new tooltip element was created",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o);spyOn(window,"getComputedStyle").and.returnValue({transitionDuration:"0.15s",transitionDelay:"0s"});const l=jasmine.createSpy();o.addEventListener("inserted.bs.tooltip",l),setTimeout(()=>{expect(l).toHaveBeenCalledTimes(1),n.hide(),setTimeout(()=>{n.show()},100),setTimeout(()=>{expect(l).toHaveBeenCalledTimes(1),t()},200)},0),n.show()}),it("should show a tooltip with custom class provided in data attributes",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip" data-bs-custom-class="custom-class">';const o=e.querySelector("a"),n=new Tooltip(o);o.addEventListener("shown.bs.tooltip",()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(e.classList.contains("custom-class")).toBeTrue(),t()}),n.show()}),it("should show a tooltip with custom class provided as a string in config",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o,{customClass:"custom-class custom-class-2"});o.addEventListener("shown.bs.tooltip",()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(e.classList.contains("custom-class")).toBeTrue(),expect(e.classList.contains("custom-class-2")).toBeTrue(),t()}),n.show()}),it("should show a tooltip with custom class provided as a function in config",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=jasmine.createSpy("customClass").and.returnValue("custom-class"),n=e.querySelector("a"),l=new Tooltip(n,{customClass:o});n.addEventListener("shown.bs.tooltip",()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(o).toHaveBeenCalled(),expect(e.classList.contains("custom-class")).toBeTrue(),t()}),l.show()})}),describe("hide",()=>{it("should hide a tooltip",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o);o.addEventListener("shown.bs.tooltip",()=>n.hide()),o.addEventListener("hidden.bs.tooltip",()=>{expect(document.querySelector(".tooltip")).toBeNull(),expect(o.getAttribute("aria-describedby")).toBeNull(),t()}),n.show()}),it("should hide a tooltip on mobile",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o);o.addEventListener("shown.bs.tooltip",()=>{document.documentElement.ontouchstart=noop,spyOn(EventHandler,"off"),n.hide()}),o.addEventListener("hidden.bs.tooltip",()=>{expect(document.querySelector(".tooltip")).toBeNull(),expect(EventHandler.off).toHaveBeenCalledWith(jasmine.any(Object),"mouseover",noop),document.documentElement.ontouchstart=void 0,t()}),n.show()}),it("should hide a tooltip without animation",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o,{animation:!1});o.addEventListener("shown.bs.tooltip",()=>n.hide()),o.addEventListener("hidden.bs.tooltip",()=>{expect(document.querySelector(".tooltip")).toBeNull(),expect(o.getAttribute("aria-describedby")).toBeNull(),t()}),n.show()}),it("should not hide a tooltip if hide event is prevented",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o,{animation:!1});o.addEventListener("shown.bs.tooltip",()=>n.hide()),o.addEventListener("hide.bs.tooltip",e=>{e.preventDefault(),setTimeout(()=>{expect(document.querySelector(".tooltip")).not.toBeNull(),t()},20)}),o.addEventListener("hidden.bs.tooltip",()=>{throw new Error("should not trigger hidden event")}),n.show()}),it("should not throw error running hide if popper hasn't been shown",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),o=new Tooltip(t);try{o.hide(),expect().nothing()}catch{throw new Error("should not throw error")}})}),describe("update",()=>{it("should call popper update",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o);o.addEventListener("shown.bs.tooltip",()=>{spyOn(n._popper,"update"),n.update(),expect(n._popper.update).toHaveBeenCalled(),t()}),n.show()}),it("should do nothing if the tooltip is not shown",()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a");new Tooltip(t).update(),expect().nothing()})}),describe("isWithContent",()=>{it("should return true if there is content",()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t);expect(o.isWithContent()).toEqual(!0)}),it("should return false if there is no content",()=>{e.innerHTML='<a href="#" rel="tooltip" title="">';const t=e.querySelector("a"),o=new Tooltip(t);expect(o.isWithContent()).toEqual(!1)})}),describe("getTipElement",()=>{it("should create the tip element and return it",()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t);spyOn(document,"createElement").and.callThrough(),expect(o.getTipElement()).toBeDefined(),expect(document.createElement).toHaveBeenCalled()}),it("should return the created tip element",()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t),n=spyOn(document,"createElement").and.callThrough();expect(o.getTipElement()).toBeDefined(),expect(n).toHaveBeenCalled(),n.calls.reset(),expect(o.getTipElement()).toBeDefined(),expect(n).not.toHaveBeenCalled()})}),describe("setContent",()=>{it("should set tip content",()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t),n=o.getTipElement();o.setContent(n),expect(n.classList.contains("show")).toEqual(!1),expect(n.classList.contains("fade")).toEqual(!1),expect(n.querySelector(".tooltip-inner").textContent).toEqual("Another tooltip")})}),describe("updateAttachment",()=>{it("should use end class name when right placement specified",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o,{placement:"right"});o.addEventListener("inserted.bs.tooltip",()=>{expect(n.getTipElement().classList.contains("bs-tooltip-end")).toEqual(!0),t()}),n.show()}),it("should use start class name when left placement specified",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const o=e.querySelector("a"),n=new Tooltip(o,{placement:"left"});o.addEventListener("inserted.bs.tooltip",()=>{expect(n.getTipElement().classList.contains("bs-tooltip-start")).toEqual(!0),t()}),n.show()})}),describe("setElementContent",()=>{it("should do nothing if the element is null",()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a");new Tooltip(t).setElementContent(null,null),expect().nothing()}),it("should add the content as a child of the element",()=>{e.innerHTML=['<a href="#" rel="tooltip" title="Another tooltip">','<div id="childContent"></div>'].join("");const t=e.querySelector("a"),o=e.querySelector("div"),n=new Tooltip(t,{html:!0});n.setElementContent(n.getTipElement(),o),expect(o.parentNode).toEqual(n.getTipElement())}),it("should do nothing if the content is a child of the element",()=>{e.innerHTML=['<a href="#" rel="tooltip" title="Another tooltip">','<div id="childContent"></div>'].join("");const t=e.querySelector("a"),o=e.querySelector("div"),n=new Tooltip(t,{html:!0});n.getTipElement().append(o),n.setElementContent(n.getTipElement(),o),expect().nothing()}),it("should add the content as a child of the element for jQuery elements",()=>{e.innerHTML=['<a href="#" rel="tooltip" title="Another tooltip">','<div id="childContent"></div>'].join("");const t=e.querySelector("a"),o=e.querySelector("div"),n=new Tooltip(t,{html:!0});n.setElementContent(n.getTipElement(),{0:o,jquery:"jQuery"}),expect(o.parentNode).toEqual(n.getTipElement())}),it("should add the child text content in the element",()=>{e.innerHTML=['<a href="#" rel="tooltip" title="Another tooltip">','<div id="childContent">Tooltip</div>'].join("");const t=e.querySelector("a"),o=e.querySelector("div"),n=new Tooltip(t);n.setElementContent(n.getTipElement(),o),expect(o.textContent).toEqual(n.getTipElement().textContent)}),it("should add html without sanitize it",()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t,{sanitize:!1,html:!0});o.setElementContent(o.getTipElement(),'<div id="childContent">Tooltip</div>'),expect(o.getTipElement().querySelector("div").id).toEqual("childContent")}),it("should add html sanitized",()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t,{html:!0});o.setElementContent(o.getTipElement(),['<div id="childContent">',' <button type="button">test btn</button>',"</div>"].join("")),expect(o.getTipElement().querySelector("div").id).toEqual("childContent"),expect(o.getTipElement().querySelector("button")).toEqual(null)}),it("should add text content",()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t);o.setElementContent(o.getTipElement(),"test"),expect(o.getTipElement().textContent).toEqual("test")})}),describe("getTitle",()=>{it("should return the title",()=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">';const t=e.querySelector("a"),o=new Tooltip(t);expect(o.getTitle()).toEqual("Another tooltip")}),it("should call title function",()=>{e.innerHTML='<a href="#" rel="tooltip"></a>';const t=e.querySelector("a"),o=new Tooltip(t,{title:()=>"test"});expect(o.getTitle()).toEqual("test")})}),describe("getInstance",()=>{it("should return tooltip instance",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),o=new Tooltip(t);expect(Tooltip.getInstance(t)).toEqual(o),expect(Tooltip.getInstance(t)).toBeInstanceOf(Tooltip)}),it("should return null when there is no tooltip instance",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");expect(Tooltip.getInstance(t)).toEqual(null)})}),describe("aria-label",()=>{it("should add the aria-label attribute for referencing original title",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip"></a>';const o=e.querySelector("a"),n=new Tooltip(o);o.addEventListener("shown.bs.tooltip",()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(o.getAttribute("aria-label")).toEqual("Another tooltip"),t()}),n.show()}),it("should not add the aria-label attribute if the attribute already exists",t=>{e.innerHTML='<a href="#" rel="tooltip" aria-label="Different label" title="Another tooltip"></a>';const o=e.querySelector("a"),n=new Tooltip(o);o.addEventListener("shown.bs.tooltip",()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(o.getAttribute("aria-label")).toEqual("Different label"),t()}),n.show()}),it("should not add the aria-label attribute if the element has text content",t=>{e.innerHTML='<a href="#" rel="tooltip" title="Another tooltip">text content</a>';const o=e.querySelector("a"),n=new Tooltip(o);o.addEventListener("shown.bs.tooltip",()=>{const e=document.querySelector(".tooltip");expect(e).not.toBeNull(),expect(o.getAttribute("aria-label")).toBeNull(),t()}),n.show()})}),describe("getOrCreateInstance",()=>{it("should return tooltip instance",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),o=new Tooltip(t);expect(Tooltip.getOrCreateInstance(t)).toEqual(o),expect(Tooltip.getInstance(t)).toEqual(Tooltip.getOrCreateInstance(t,{})),expect(Tooltip.getOrCreateInstance(t)).toBeInstanceOf(Tooltip)}),it("should return new instance when there is no tooltip instance",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");expect(Tooltip.getInstance(t)).toEqual(null),expect(Tooltip.getOrCreateInstance(t)).toBeInstanceOf(Tooltip)}),it("should return new instance when there is no tooltip instance with given configuration",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");expect(Tooltip.getInstance(t)).toEqual(null);const o=Tooltip.getOrCreateInstance(t,{title:()=>"test"});expect(o).toBeInstanceOf(Tooltip),expect(o.getTitle()).toEqual("test")}),it("should return the instance when exists without given configuration",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),o=new Tooltip(t,{title:()=>"nothing"});expect(Tooltip.getInstance(t)).toEqual(o);const n=Tooltip.getOrCreateInstance(t,{title:()=>"test"});expect(o).toBeInstanceOf(Tooltip),expect(n).toEqual(o),expect(n.getTitle()).toEqual("nothing")})}),describe("jQueryInterface",()=>{it("should create a tooltip",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");jQueryMock.fn.tooltip=Tooltip.jQueryInterface,jQueryMock.elements=[t],jQueryMock.fn.tooltip.call(jQueryMock),expect(Tooltip.getInstance(t)).not.toBeNull()}),it("should not re create a tooltip",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),o=new Tooltip(t);jQueryMock.fn.tooltip=Tooltip.jQueryInterface,jQueryMock.elements=[t],jQueryMock.fn.tooltip.call(jQueryMock),expect(Tooltip.getInstance(t)).toEqual(o)}),it("should call a tooltip method",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),o=new Tooltip(t);spyOn(o,"show"),jQueryMock.fn.tooltip=Tooltip.jQueryInterface,jQueryMock.elements=[t],jQueryMock.fn.tooltip.call(jQueryMock,"show"),expect(Tooltip.getInstance(t)).toEqual(o),expect(o.show).toHaveBeenCalled()}),it("should throw error on undefined method",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");jQueryMock.fn.tooltip=Tooltip.jQueryInterface,jQueryMock.elements=[t],expect(()=>{jQueryMock.fn.tooltip.call(jQueryMock,"undefinedMethod")}).toThrowError(TypeError,'No method named "undefinedMethod"')})})});