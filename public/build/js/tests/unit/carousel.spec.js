import Carousel from"../../src/carousel";import EventHandler from"../../src/dom/event-handler";import{clearFixture,createEvent,getFixture,jQueryMock}from"../helpers/fixture";import*as util from"../../src/util";describe("Carousel",()=>{const{Simulator:e,PointerEvent:t}=window,i=t,s=Boolean(t),l=document.createElement("style");l.type="text/css",l.append(document.createTextNode(".carousel.pointer-event { touch-action: none; }"));const o=()=>{window.PointerEvent=null},a=()=>{window.PointerEvent=i};let r;beforeAll(()=>{r=getFixture()}),afterEach(()=>{clearFixture()}),describe("VERSION",()=>{it("should return plugin version",()=>{expect(Carousel.VERSION).toEqual(jasmine.any(String))})}),describe("Default",()=>{it("should return plugin default config",()=>{expect(Carousel.Default).toEqual(jasmine.any(Object))})}),describe("DATA_KEY",()=>{it("should return plugin data key",()=>{expect(Carousel.DATA_KEY).toEqual("bs.carousel")})}),describe("constructor",()=>{it("should take care of element either passed as a CSS selector or DOM element",()=>{r.innerHTML='<div id="myCarousel" class="carousel slide"></div>';const e=r.querySelector("#myCarousel"),t=new Carousel("#myCarousel"),i=new Carousel(e);expect(t._element).toEqual(e),expect(i._element).toEqual(e)}),it("should go to next item if right arrow key is pressed",e=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div id="item2" class="carousel-item">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>","</div>"].join("");const t=r.querySelector("#myCarousel"),i=new Carousel(t,{keyboard:!0});spyOn(i,"_keydown").and.callThrough(),t.addEventListener("slid.bs.carousel",()=>{expect(r.querySelector(".active")).toEqual(r.querySelector("#item2")),expect(i._keydown).toHaveBeenCalled(),e()});const s=createEvent("keydown");s.key="ArrowRight",t.dispatchEvent(s)}),it("should go to previous item if left arrow key is pressed",e=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div id="item1" class="carousel-item">item 1</div>','    <div class="carousel-item active">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>","</div>"].join("");const t=r.querySelector("#myCarousel"),i=new Carousel(t,{keyboard:!0});spyOn(i,"_keydown").and.callThrough(),t.addEventListener("slid.bs.carousel",()=>{expect(r.querySelector(".active")).toEqual(r.querySelector("#item1")),expect(i._keydown).toHaveBeenCalled(),e()});const s=createEvent("keydown");s.key="ArrowLeft",t.dispatchEvent(s)}),it("should not prevent keydown if key is not ARROW_LEFT or ARROW_RIGHT",e=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div class="carousel-item">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>","</div>"].join("");const t=r.querySelector("#myCarousel"),i=new Carousel(t,{keyboard:!0});spyOn(i,"_keydown").and.callThrough(),t.addEventListener("keydown",t=>{expect(i._keydown).toHaveBeenCalled(),expect(t.defaultPrevented).toEqual(!1),e()});const s=createEvent("keydown");s.key="ArrowDown",t.dispatchEvent(s)}),it("should ignore keyboard events within <input>s and <textarea>s",()=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">','      <input type="text">',"      <textarea></textarea>","    </div>",'    <div class="carousel-item"></div>','    <div class="carousel-item">item 3</div>',"  </div>","</div>"].join("");const e=r.querySelector("#myCarousel"),t=r.querySelector("input"),i=r.querySelector("textarea"),s=new Carousel(e,{keyboard:!0}),l=spyOn(s,"_keydown").and.callThrough(),o=spyOn(s,"_slide"),a=createEvent("keydown",{bubbles:!0,cancelable:!0});a.key="ArrowRight",Object.defineProperty(a,"target",{value:t,writable:!0,configurable:!0}),t.dispatchEvent(a),expect(l).toHaveBeenCalled(),expect(o).not.toHaveBeenCalled(),l.calls.reset(),o.calls.reset(),Object.defineProperty(a,"target",{value:i}),i.dispatchEvent(a),expect(l).toHaveBeenCalled(),expect(o).not.toHaveBeenCalled()}),it("should not slide if arrow key is pressed and carousel is sliding",()=>{r.innerHTML="<div></div>";const e=r.querySelector("div"),t=new Carousel(e,{});spyOn(t,"_triggerSlideEvent"),t._isSliding=!0,["ArrowLeft","ArrowRight"].forEach(t=>{const i=createEvent("keydown");i.key=t,e.dispatchEvent(i)}),expect(t._triggerSlideEvent).not.toHaveBeenCalled()}),it("should wrap around from end to start when wrap option is true",e=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div id="one" class="carousel-item active"></div>','    <div id="two" class="carousel-item"></div>','    <div id="three" class="carousel-item">item 3</div>',"  </div>","</div>"].join("");const t=r.querySelector("#myCarousel"),i=new Carousel(t,{wrap:!0});t.addEventListener("slid.bs.carousel",s=>{const l=t.querySelector(".carousel-item.active").getAttribute("id");"two"!==l&&"three"!==l?"one"===l&&(expect(l).toEqual("one"),expect(s.from+1).toEqual(3),e()):i.next()}),i.next()}),it("should stay at the start when the prev method is called and wrap is false",e=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div id="one" class="carousel-item active"></div>','    <div id="two" class="carousel-item"></div>','    <div id="three" class="carousel-item">item 3</div>',"  </div>","</div>"].join("");const t=r.querySelector("#myCarousel"),i=r.querySelector("#one"),s=new Carousel(t,{wrap:!1});t.addEventListener("slid.bs.carousel",()=>{throw new Error("carousel slid when it should not have slid")}),s.prev(),setTimeout(()=>{expect(i.classList.contains("active")).toEqual(!0),e()},10)}),it("should not add touch event listeners if touch = false",()=>{r.innerHTML="<div></div>";const e=r.querySelector("div");spyOn(Carousel.prototype,"_addTouchEventListeners");const t=new Carousel(e,{touch:!1});expect(t._addTouchEventListeners).not.toHaveBeenCalled()}),it("should not add touch event listeners if touch supported = false",()=>{r.innerHTML="<div></div>";const e=r.querySelector("div"),t=new Carousel(e);EventHandler.off(e,".bs-carousel"),t._touchSupported=!1,spyOn(t,"_addTouchEventListeners"),t._addEventListeners(),expect(t._addTouchEventListeners).not.toHaveBeenCalled()}),it("should add touch event listeners by default",()=>{r.innerHTML="<div></div>";const e=r.querySelector("div");spyOn(Carousel.prototype,"_addTouchEventListeners"),document.documentElement.ontouchstart=()=>{};const t=new Carousel(e);expect(t._addTouchEventListeners).toHaveBeenCalled()}),it("should allow swiperight and call _slide (prev) with pointer events",t=>{if(!s)return expect().nothing(),void t();document.documentElement.ontouchstart=()=>{},document.head.append(l),e.setType("pointer"),r.innerHTML=['<div class="carousel" data-bs-interval="false">','  <div class="carousel-inner">','    <div id="item" class="carousel-item">','      <img alt="">',"    </div>",'    <div class="carousel-item active">','      <img alt="">',"    </div>","  </div>","</div>"].join("");const i=r.querySelector(".carousel"),o=r.querySelector("#item"),a=new Carousel(i);spyOn(a,"_slide").and.callThrough(),i.addEventListener("slid.bs.carousel",e=>{expect(o.classList.contains("active")).toEqual(!0),expect(a._slide).toHaveBeenCalledWith("right"),expect(e.direction).toEqual("right"),l.remove(),delete document.documentElement.ontouchstart,t()}),e.gestures.swipe(i,{deltaX:300,deltaY:0})}),it("should allow swipeleft and call next with pointer events",t=>{if(!s)return expect().nothing(),void t();document.documentElement.ontouchstart=()=>{},document.head.append(l),e.setType("pointer"),r.innerHTML=['<div class="carousel" data-bs-interval="false">','  <div class="carousel-inner">','    <div id="item" class="carousel-item active">','      <img alt="">',"    </div>",'    <div class="carousel-item">','      <img alt="">',"    </div>","  </div>","</div>"].join("");const i=r.querySelector(".carousel"),o=r.querySelector("#item"),a=new Carousel(i);spyOn(a,"_slide").and.callThrough(),i.addEventListener("slid.bs.carousel",e=>{expect(o.classList.contains("active")).toEqual(!1),expect(a._slide).toHaveBeenCalledWith("left"),expect(e.direction).toEqual("left"),l.remove(),delete document.documentElement.ontouchstart,t()}),e.gestures.swipe(i,{pos:[300,10],deltaX:-300,deltaY:0})}),it("should allow swiperight and call _slide (prev) with touch events",t=>{e.setType("touch"),o(),document.documentElement.ontouchstart=()=>{},r.innerHTML=['<div class="carousel" data-bs-interval="false">','  <div class="carousel-inner">','    <div id="item" class="carousel-item">','      <img alt="">',"    </div>",'    <div class="carousel-item active">','      <img alt="">',"    </div>","  </div>","</div>"].join("");const i=r.querySelector(".carousel"),s=r.querySelector("#item"),l=new Carousel(i);spyOn(l,"_slide").and.callThrough(),i.addEventListener("slid.bs.carousel",e=>{expect(s.classList.contains("active")).toEqual(!0),expect(l._slide).toHaveBeenCalledWith("right"),expect(e.direction).toEqual("right"),delete document.documentElement.ontouchstart,a(),t()}),e.gestures.swipe(i,{deltaX:300,deltaY:0})}),it("should allow swipeleft and call _slide (next) with touch events",t=>{e.setType("touch"),o(),document.documentElement.ontouchstart=()=>{},r.innerHTML=['<div class="carousel" data-bs-interval="false">','  <div class="carousel-inner">','    <div id="item" class="carousel-item active">','      <img alt="">',"    </div>",'    <div class="carousel-item">','      <img alt="">',"    </div>","  </div>","</div>"].join("");const i=r.querySelector(".carousel"),s=r.querySelector("#item"),l=new Carousel(i);spyOn(l,"_slide").and.callThrough(),i.addEventListener("slid.bs.carousel",e=>{expect(s.classList.contains("active")).toEqual(!1),expect(l._slide).toHaveBeenCalledWith("left"),expect(e.direction).toEqual("left"),delete document.documentElement.ontouchstart,a(),t()}),e.gestures.swipe(i,{pos:[300,10],deltaX:-300,deltaY:0})}),it("should not slide when swiping and carousel is sliding",t=>{e.setType("touch"),o(),document.documentElement.ontouchstart=()=>{},r.innerHTML=['<div class="carousel" data-bs-interval="false">','  <div class="carousel-inner">','    <div id="item" class="carousel-item active">','      <img alt="">',"    </div>",'    <div class="carousel-item">','      <img alt="">',"    </div>","  </div>","</div>"].join("");const i=r.querySelector(".carousel"),s=new Carousel(i);s._isSliding=!0,spyOn(s,"_triggerSlideEvent"),e.gestures.swipe(i,{deltaX:300,deltaY:0}),e.gestures.swipe(i,{pos:[300,10],deltaX:-300,deltaY:0}),setTimeout(()=>{expect(s._triggerSlideEvent).not.toHaveBeenCalled(),delete document.documentElement.ontouchstart,a(),t()},300)}),it("should not allow pinch with touch events",t=>{e.setType("touch"),o(),document.documentElement.ontouchstart=()=>{},r.innerHTML='<div class="carousel" data-bs-interval="false"></div>';const i=r.querySelector(".carousel"),s=new Carousel(i);e.gestures.swipe(i,{pos:[300,10],deltaX:-300,deltaY:0,touches:2},()=>{a(),delete document.documentElement.ontouchstart,expect(s.touchDeltaX).toEqual(0),t()})}),it("should call pause method on mouse over with pause equal to hover",e=>{r.innerHTML='<div class="carousel"></div>';const t=r.querySelector(".carousel"),i=new Carousel(t);spyOn(i,"pause");const s=createEvent("mouseover");t.dispatchEvent(s),setTimeout(()=>{expect(i.pause).toHaveBeenCalled(),e()},10)}),it("should call cycle on mouse out with pause equal to hover",e=>{r.innerHTML='<div class="carousel"></div>';const t=r.querySelector(".carousel"),i=new Carousel(t);spyOn(i,"cycle");const s=createEvent("mouseout");t.dispatchEvent(s),setTimeout(()=>{expect(i.cycle).toHaveBeenCalled(),e()},10)})}),describe("next",()=>{it("should not slide if the carousel is sliding",()=>{r.innerHTML="<div></div>";const e=r.querySelector("div"),t=new Carousel(e,{});spyOn(t,"_triggerSlideEvent"),t._isSliding=!0,t.next(),expect(t._triggerSlideEvent).not.toHaveBeenCalled()}),it("should not fire slid when slide is prevented",e=>{r.innerHTML="<div></div>";const t=r.querySelector("div"),i=new Carousel(t,{});let s=!1;t.addEventListener("slide.bs.carousel",t=>{t.preventDefault(),setTimeout(()=>{expect(s).toEqual(!1),e()},20)}),t.addEventListener("slid.bs.carousel",()=>{s=!0}),i.next()}),it("should fire slide event with: direction, relatedTarget, from and to",e=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div class="carousel-item">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>","</div>"].join("");const t=r.querySelector("#myCarousel"),i=new Carousel(t,{}),s=e=>{expect(e.direction).toEqual("left"),expect(e.relatedTarget.classList.contains("carousel-item")).toEqual(!0),expect(e.from).toEqual(0),expect(e.to).toEqual(1),t.removeEventListener("slide.bs.carousel",s),t.addEventListener("slide.bs.carousel",l),i.prev()},l=t=>{expect(t.direction).toEqual("right"),e()};t.addEventListener("slide.bs.carousel",s),i.next()}),it("should fire slid event with: direction, relatedTarget, from and to",e=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div class="carousel-item">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>","</div>"].join("");const t=r.querySelector("#myCarousel"),i=new Carousel(t,{}),s=e=>{expect(e.direction).toEqual("left"),expect(e.relatedTarget.classList.contains("carousel-item")).toEqual(!0),expect(e.from).toEqual(0),expect(e.to).toEqual(1),t.removeEventListener("slid.bs.carousel",s),t.addEventListener("slid.bs.carousel",l),i.prev()},l=t=>{expect(t.direction).toEqual("right"),e()};t.addEventListener("slid.bs.carousel",s),i.next()}),it("should update the active element to the next item before sliding",()=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div id="secondItem" class="carousel-item">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>","</div>"].join("");const e=r.querySelector("#myCarousel"),t=r.querySelector("#secondItem"),i=new Carousel(e);i.next(),expect(i._activeElement).toEqual(t)}),it("should update indicators if present",e=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-indicators">','    <button type="button" id="firstIndicator" data-bs-target="myCarousel" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>','    <button type="button" id="secondIndicator" data-bs-target="myCarousel" data-bs-slide-to="1" aria-label="Slide 2"></button>','    <button type="button" data-bs-target="myCarousel" data-bs-slide-to="2" aria-label="Slide 3"></button>',"  </div>",'  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div class="carousel-item" data-bs-interval="7">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>","</div>"].join("");const t=r.querySelector("#myCarousel"),i=r.querySelector("#firstIndicator"),s=r.querySelector("#secondIndicator"),l=new Carousel(t);t.addEventListener("slid.bs.carousel",()=>{expect(i.classList.contains("active")).toEqual(!1),expect(i.hasAttribute("aria-current")).toEqual(!1),expect(s.classList.contains("active")).toEqual(!0),expect(s.getAttribute("aria-current")).toEqual("true"),e()}),l.next()}),it("should call next()/prev() instance methods when clicking the respective direction buttons",()=>{r.innerHTML=['<div id="carousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div class="carousel-item">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>",'  <button class="carousel-control-prev" type="button" data-bs-target="#carousel" data-bs-slide="prev"></button>','  <button class="carousel-control-next" type="button" data-bs-target="#carousel" data-bs-slide="next"></button>',"</div>"].join("");const e=r.querySelector("#carousel"),t=r.querySelector(".carousel-control-prev"),i=r.querySelector(".carousel-control-next"),s=new Carousel(e),l=spyOn(s,"next"),o=spyOn(s,"prev");i.click(),t.click(),expect(l).toHaveBeenCalled(),expect(o).toHaveBeenCalled()})}),describe("nextWhenVisible",()=>{it("should not call next when the page is not visible",()=>{r.innerHTML=['<div style="display: none;">','  <div class="carousel" data-bs-interval="false"></div>',"</div>"].join("");const e=r.querySelector(".carousel"),t=new Carousel(e);spyOn(t,"next"),t.nextWhenVisible(),expect(t.next).not.toHaveBeenCalled()})}),describe("prev",()=>{it("should not slide if the carousel is sliding",()=>{r.innerHTML="<div></div>";const e=r.querySelector("div"),t=new Carousel(e,{});spyOn(t,"_triggerSlideEvent"),t._isSliding=!0,t.prev(),expect(t._triggerSlideEvent).not.toHaveBeenCalled()})}),describe("pause",()=>{it("should call cycle if the carousel have carousel-item-next and carousel-item-prev class",()=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div class="carousel-item carousel-item-next">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>",'  <div class="carousel-control-prev"></div>','  <div class="carousel-control-next"></div>',"</div>"].join("");const e=r.querySelector("#myCarousel"),t=new Carousel(e);spyOn(t,"cycle"),spyOn(window,"clearInterval"),t.pause(),expect(t.cycle).toHaveBeenCalledWith(!0),expect(window.clearInterval).toHaveBeenCalled(),expect(t._isPaused).toEqual(!0)}),it("should not call cycle if nothing is in transition",()=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div class="carousel-item">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>",'  <div class="carousel-control-prev"></div>','  <div class="carousel-control-next"></div>',"</div>"].join("");const e=r.querySelector("#myCarousel"),t=new Carousel(e);spyOn(t,"cycle"),spyOn(window,"clearInterval"),t.pause(),expect(t.cycle).not.toHaveBeenCalled(),expect(window.clearInterval).toHaveBeenCalled(),expect(t._isPaused).toEqual(!0)}),it("should not set is paused at true if an event is passed",()=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div class="carousel-item">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>",'  <div class="carousel-control-prev"></div>','  <div class="carousel-control-next"></div>',"</div>"].join("");const e=r.querySelector("#myCarousel"),t=new Carousel(e),i=createEvent("mouseenter");spyOn(window,"clearInterval"),t.pause(i),expect(window.clearInterval).toHaveBeenCalled(),expect(t._isPaused).toEqual(!1)})}),describe("cycle",()=>{it("should set an interval",()=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div class="carousel-item">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>",'  <div class="carousel-control-prev"></div>','  <div class="carousel-control-next"></div>',"</div>"].join("");const e=r.querySelector("#myCarousel"),t=new Carousel(e);spyOn(window,"setInterval").and.callThrough(),t.cycle(),expect(window.setInterval).toHaveBeenCalled()}),it("should not set interval if the carousel is paused",()=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div class="carousel-item">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>",'  <div class="carousel-control-prev"></div>','  <div class="carousel-control-next"></div>',"</div>"].join("");const e=r.querySelector("#myCarousel"),t=new Carousel(e);spyOn(window,"setInterval").and.callThrough(),t._isPaused=!0,t.cycle(!0),expect(window.setInterval).not.toHaveBeenCalled()}),it("should clear interval if there is one",()=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div class="carousel-item">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>",'  <div class="carousel-control-prev"></div>','  <div class="carousel-control-next"></div>',"</div>"].join("");const e=r.querySelector("#myCarousel"),t=new Carousel(e);t._interval=setInterval(()=>{},10),spyOn(window,"setInterval").and.callThrough(),spyOn(window,"clearInterval").and.callThrough(),t.cycle(),expect(window.setInterval).toHaveBeenCalled(),expect(window.clearInterval).toHaveBeenCalled()}),it("should get interval from data attribute on the active item element",()=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active" data-bs-interval="7">item 1</div>','    <div id="secondItem" class="carousel-item" data-bs-interval="9385">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>","</div>"].join("");const e=r.querySelector("#myCarousel"),t=r.querySelector("#secondItem"),i=new Carousel(e,{interval:1814});expect(i._config.interval).toEqual(1814),i.cycle(),expect(i._config.interval).toEqual(7),i._activeElement=t,i.cycle(),expect(i._config.interval).toEqual(9385)})}),describe("to",()=>{it("should go directly to the provided index",e=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div id="item1" class="carousel-item active">item 1</div>','    <div class="carousel-item">item 2</div>','    <div id="item3" class="carousel-item">item 3</div>',"  </div>","</div>"].join("");const t=r.querySelector("#myCarousel"),i=new Carousel(t,{});expect(r.querySelector(".active")).toEqual(r.querySelector("#item1")),i.to(2),t.addEventListener("slid.bs.carousel",()=>{expect(r.querySelector(".active")).toEqual(r.querySelector("#item3")),e()})}),it("should return to a previous slide if the provided index is lower than the current",e=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item">item 1</div>','    <div id="item2" class="carousel-item">item 2</div>','    <div id="item3" class="carousel-item active">item 3</div>',"  </div>","</div>"].join("");const t=r.querySelector("#myCarousel"),i=new Carousel(t,{});expect(r.querySelector(".active")).toEqual(r.querySelector("#item3")),i.to(1),t.addEventListener("slid.bs.carousel",()=>{expect(r.querySelector(".active")).toEqual(r.querySelector("#item2")),e()})}),it("should do nothing if a wrong index is provided",()=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div class="carousel-item" data-bs-interval="7">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>","</div>"].join("");const e=r.querySelector("#myCarousel"),t=new Carousel(e,{}),i=spyOn(t,"_slide");t.to(25),expect(i).not.toHaveBeenCalled(),i.calls.reset(),t.to(-5),expect(i).not.toHaveBeenCalled()}),it("should call pause and cycle is the provided is the same compare to the current one",()=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div class="carousel-item" data-bs-interval="7">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>","</div>"].join("");const e=r.querySelector("#myCarousel"),t=new Carousel(e,{});spyOn(t,"_slide"),spyOn(t,"pause"),spyOn(t,"cycle"),t.to(0),expect(t._slide).not.toHaveBeenCalled(),expect(t.pause).toHaveBeenCalled(),expect(t.cycle).toHaveBeenCalled()}),it("should wait before performing to if a slide is sliding",e=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div class="carousel-item" data-bs-interval="7">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>","</div>"].join("");const t=r.querySelector("#myCarousel"),i=new Carousel(t,{});spyOn(EventHandler,"one").and.callThrough(),spyOn(i,"_slide"),i._isSliding=!0,i.to(1),expect(i._slide).not.toHaveBeenCalled(),expect(EventHandler.one).toHaveBeenCalled(),spyOn(i,"to"),EventHandler.trigger(t,"slid.bs.carousel"),setTimeout(()=>{expect(i.to).toHaveBeenCalledWith(1),e()})})}),describe("rtl function",()=>{it('"_directionToOrder" and "_orderToDirection" must return the right results',()=>{r.innerHTML="<div></div>";const e=r.querySelector("div"),t=new Carousel(e,{});expect(t._directionToOrder("left")).toEqual("next"),expect(t._directionToOrder("prev")).toEqual("prev"),expect(t._directionToOrder("right")).toEqual("prev"),expect(t._directionToOrder("next")).toEqual("next"),expect(t._orderToDirection("next")).toEqual("left"),expect(t._orderToDirection("prev")).toEqual("right")}),it('"_directionToOrder" and "_orderToDirection" must return the right results when rtl=true',()=>{document.documentElement.dir="rtl",r.innerHTML="<div></div>";const e=r.querySelector("div"),t=new Carousel(e,{});expect(util.isRTL()).toEqual(!0,"rtl has to be true"),expect(t._directionToOrder("left")).toEqual("prev"),expect(t._directionToOrder("prev")).toEqual("prev"),expect(t._directionToOrder("right")).toEqual("next"),expect(t._directionToOrder("next")).toEqual("next"),expect(t._orderToDirection("next")).toEqual("right"),expect(t._orderToDirection("prev")).toEqual("left"),document.documentElement.dir="ltl"}),it('"_slide" has to call _directionToOrder and "_orderToDirection"',()=>{r.innerHTML="<div></div>";const e=r.querySelector("div"),t=new Carousel(e,{}),i=spyOn(t,"_directionToOrder").and.callThrough(),s=spyOn(t,"_orderToDirection").and.callThrough();t._slide("left"),expect(i).toHaveBeenCalledWith("left"),expect(s).toHaveBeenCalledWith("next"),t._slide("right"),expect(i).toHaveBeenCalledWith("right"),expect(s).toHaveBeenCalledWith("prev")}),it('"_slide" has to call "_directionToOrder" and "_orderToDirection" when rtl=true',()=>{document.documentElement.dir="rtl",r.innerHTML="<div></div>";const e=r.querySelector("div"),t=new Carousel(e,{}),i=spyOn(t,"_directionToOrder").and.callThrough(),s=spyOn(t,"_orderToDirection").and.callThrough();t._slide("left"),expect(i).toHaveBeenCalledWith("left"),expect(s).toHaveBeenCalledWith("prev"),t._slide("right"),expect(i).toHaveBeenCalledWith("right"),expect(s).toHaveBeenCalledWith("next"),document.documentElement.dir="ltl"})}),describe("dispose",()=>{it("should destroy a carousel",()=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div class="carousel-item" data-bs-interval="7">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>","</div>"].join("");const e=r.querySelector("#myCarousel"),t=spyOn(e,"addEventListener").and.callThrough(),i=spyOn(e,"removeEventListener").and.callThrough();document.documentElement.ontouchstart=()=>{};const s=new Carousel(e),l=[["keydown",jasmine.any(Function),jasmine.any(Boolean)],["mouseover",jasmine.any(Function),jasmine.any(Boolean)],["mouseout",jasmine.any(Function),jasmine.any(Boolean)],...s._pointerEvent?[["pointerdown",jasmine.any(Function),jasmine.any(Boolean)],["pointerup",jasmine.any(Function),jasmine.any(Boolean)]]:[["touchstart",jasmine.any(Function),jasmine.any(Boolean)],["touchmove",jasmine.any(Function),jasmine.any(Boolean)],["touchend",jasmine.any(Function),jasmine.any(Boolean)]]];expect(t.calls.allArgs()).toEqual(l),s.dispose(),expect(i.calls.allArgs()).toEqual(l),delete document.documentElement.ontouchstart})}),describe("getInstance",()=>{it("should return carousel instance",()=>{r.innerHTML="<div></div>";const e=r.querySelector("div"),t=new Carousel(e);expect(Carousel.getInstance(e)).toEqual(t),expect(Carousel.getInstance(e)).toBeInstanceOf(Carousel)}),it("should return null when there is no carousel instance",()=>{r.innerHTML="<div></div>";const e=r.querySelector("div");expect(Carousel.getInstance(e)).toEqual(null)})}),describe("getOrCreateInstance",()=>{it("should return carousel instance",()=>{r.innerHTML="<div></div>";const e=r.querySelector("div"),t=new Carousel(e);expect(Carousel.getOrCreateInstance(e)).toEqual(t),expect(Carousel.getInstance(e)).toEqual(Carousel.getOrCreateInstance(e,{})),expect(Carousel.getOrCreateInstance(e)).toBeInstanceOf(Carousel)}),it("should return new instance when there is no carousel instance",()=>{r.innerHTML="<div></div>";const e=r.querySelector("div");expect(Carousel.getInstance(e)).toEqual(null),expect(Carousel.getOrCreateInstance(e)).toBeInstanceOf(Carousel)}),it("should return new instance when there is no carousel instance with given configuration",()=>{r.innerHTML="<div></div>";const e=r.querySelector("div");expect(Carousel.getInstance(e)).toEqual(null);const t=Carousel.getOrCreateInstance(e,{interval:1});expect(t).toBeInstanceOf(Carousel),expect(t._config.interval).toEqual(1)}),it("should return the instance when exists without given configuration",()=>{r.innerHTML="<div></div>";const e=r.querySelector("div"),t=new Carousel(e,{interval:1});expect(Carousel.getInstance(e)).toEqual(t);const i=Carousel.getOrCreateInstance(e,{interval:2});expect(t).toBeInstanceOf(Carousel),expect(i).toEqual(t),expect(i._config.interval).toEqual(1)})}),describe("jQueryInterface",()=>{it("should create a carousel",()=>{r.innerHTML="<div></div>";const e=r.querySelector("div");jQueryMock.fn.carousel=Carousel.jQueryInterface,jQueryMock.elements=[e],jQueryMock.fn.carousel.call(jQueryMock),expect(Carousel.getInstance(e)).not.toBeNull()}),it("should not re create a carousel",()=>{r.innerHTML="<div></div>";const e=r.querySelector("div"),t=new Carousel(e);jQueryMock.fn.carousel=Carousel.jQueryInterface,jQueryMock.elements=[e],jQueryMock.fn.carousel.call(jQueryMock),expect(Carousel.getInstance(e)).toEqual(t)}),it("should call to if the config is a number",()=>{r.innerHTML="<div></div>";const e=r.querySelector("div"),t=new Carousel(e);spyOn(t,"to"),jQueryMock.fn.carousel=Carousel.jQueryInterface,jQueryMock.elements=[e],jQueryMock.fn.carousel.call(jQueryMock,2),expect(t.to).toHaveBeenCalledWith(2)}),it("should throw error on undefined method",()=>{r.innerHTML="<div></div>";const e=r.querySelector("div");jQueryMock.fn.carousel=Carousel.jQueryInterface,jQueryMock.elements=[e],expect(()=>{jQueryMock.fn.carousel.call(jQueryMock,"undefinedMethod")}).toThrowError(TypeError,'No method named "undefinedMethod"')})}),describe("data-api",()=>{it('should init carousels with data-bs-ride="carousel" on load',()=>{r.innerHTML='<div data-bs-ride="carousel"></div>';const e=r.querySelector("div"),t=createEvent("load");window.dispatchEvent(t),expect(Carousel.getInstance(e)).not.toBeNull()}),it("should create carousel and go to the next slide on click (with real button controls)",e=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div id="item2" class="carousel-item">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>",'  <button class="carousel-control-prev" data-bs-target="#myCarousel" type="button" data-bs-slide="prev"></button>','  <button id="next" class="carousel-control-next" data-bs-target="#myCarousel" type="button" data-bs-slide="next"></div>',"</div>"].join("");const t=r.querySelector("#next"),i=r.querySelector("#item2");t.click(),setTimeout(()=>{expect(i.classList.contains("active")).toEqual(!0),e()},10)}),it("should create carousel and go to the next slide on click (using links as controls)",e=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div id="item2" class="carousel-item">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>",'  <a class="carousel-control-prev" href="#myCarousel" role="button" data-bs-slide="prev"></button>','  <a id="next" class="carousel-control-next" href="#myCarousel" role="button" data-bs-slide="next"></div>',"</div>"].join("");const t=r.querySelector("#next"),i=r.querySelector("#item2");t.click(),setTimeout(()=>{expect(i.classList.contains("active")).toEqual(!0),e()},10)}),it("should create carousel and go to the next slide on click with data-bs-slide-to",e=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div id="item2" class="carousel-item">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>",'  <div id="next" data-bs-target="#myCarousel" data-bs-slide-to="1"></div>',"</div>"].join("");const t=r.querySelector("#next"),i=r.querySelector("#item2");t.click(),setTimeout(()=>{expect(i.classList.contains("active")).toEqual(!0),e()},10)}),it("should do nothing if no selector on click on arrows",()=>{r.innerHTML=['<div id="myCarousel" class="carousel slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div class="carousel-item">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>",'  <button class="carousel-control-prev" data-bs-target="#myCarousel" type="button" data-bs-slide="prev"></button>','  <button id="next" class="carousel-control-next" type="button" data-bs-slide="next"></button>',"</div>"].join("");r.querySelector("#next").click(),expect().nothing()}),it("should do nothing if no carousel class on click on arrows",()=>{r.innerHTML=['<div id="myCarousel" class="slide">','  <div class="carousel-inner">','    <div class="carousel-item active">item 1</div>','    <div id="item2" class="carousel-item">item 2</div>','    <div class="carousel-item">item 3</div>',"  </div>",'  <button class="carousel-control-prev" data-bs-target="#myCarousel" type="button" data-bs-slide="prev"></div>','  <button id="next" class="carousel-control-next" data-bs-target="#myCarousel" type="button" data-bs-slide="next"></div>',"</div>"].join("");r.querySelector("#next").click(),expect().nothing()})})});