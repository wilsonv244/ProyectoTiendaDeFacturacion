import Alert from"../../src/alert";import{getTransitionDurationFromElement}from"../../src/util/index";import{clearFixture,getFixture,jQueryMock}from"../helpers/fixture";describe("Alert",()=>{let e;beforeAll(()=>{e=getFixture()}),afterEach(()=>{clearFixture()}),it("should take care of element either passed as a CSS selector or DOM element",()=>{e.innerHTML='<div class="alert"></div>';const t=e.querySelector(".alert"),r=new Alert(".alert"),l=new Alert(t);expect(r._element).toEqual(t),expect(l._element).toEqual(t)}),it("should return version",()=>{expect(typeof Alert.VERSION).toEqual("string")}),describe("DATA_KEY",()=>{it("should return plugin data key",()=>{expect(Alert.DATA_KEY).toEqual("bs.alert")})}),describe("data-api",()=>{it("should close an alert without instantiating it manually",()=>{e.innerHTML=['<div class="alert">','  <button type="button" data-bs-dismiss="alert">x</button>',"</div>"].join("");document.querySelector("button").click(),expect(document.querySelectorAll(".alert").length).toEqual(0)}),it("should close an alert without instantiating it manually with the parent selector",()=>{e.innerHTML=['<div class="alert">','  <button type="button" data-bs-target=".alert" data-bs-dismiss="alert">x</button>',"</div>"].join("");document.querySelector("button").click(),expect(document.querySelectorAll(".alert").length).toEqual(0)})}),describe("close",()=>{it("should close an alert",t=>{const r=jasmine.createSpy("spy",getTransitionDurationFromElement);e.innerHTML='<div class="alert"></div>';const l=document.querySelector(".alert"),n=new Alert(l);l.addEventListener("closed.bs.alert",()=>{expect(document.querySelectorAll(".alert").length).toEqual(0),expect(r).not.toHaveBeenCalled(),t()}),n.close()}),it("should close alert with fade class",t=>{e.innerHTML='<div class="alert fade"></div>';const r=document.querySelector(".alert"),l=new Alert(r);r.addEventListener("transitionend",()=>{expect().nothing()}),r.addEventListener("closed.bs.alert",()=>{expect(document.querySelectorAll(".alert").length).toEqual(0),t()}),l.close()}),it("should not remove alert if close event is prevented",t=>{e.innerHTML='<div class="alert"></div>';const r=()=>document.querySelector(".alert"),l=r(),n=new Alert(l);l.addEventListener("close.bs.alert",e=>{e.preventDefault(),setTimeout(()=>{expect(r()).not.toBeNull(),t()},10)}),l.addEventListener("closed.bs.alert",()=>{throw new Error("should not fire closed event")}),n.close()})}),describe("dispose",()=>{it("should dispose an alert",()=>{e.innerHTML='<div class="alert"></div>';const t=document.querySelector(".alert"),r=new Alert(t);expect(Alert.getInstance(t)).not.toBeNull(),r.dispose(),expect(Alert.getInstance(t)).toBeNull()})}),describe("jQueryInterface",()=>{it("should handle config passed and toggle existing alert",()=>{e.innerHTML='<div class="alert"></div>';const t=e.querySelector(".alert"),r=new Alert(t);spyOn(r,"close"),jQueryMock.fn.alert=Alert.jQueryInterface,jQueryMock.elements=[t],jQueryMock.fn.alert.call(jQueryMock,"close"),expect(r.close).toHaveBeenCalled()}),it("should create new alert instance and call close",()=>{e.innerHTML='<div class="alert"></div>';const t=e.querySelector(".alert");jQueryMock.fn.alert=Alert.jQueryInterface,jQueryMock.elements=[t],expect(Alert.getInstance(t)).toBeNull(),jQueryMock.fn.alert.call(jQueryMock,"close"),expect(e.querySelector(".alert")).toBeNull()}),it("should just create an alert instance without calling close",()=>{e.innerHTML='<div class="alert"></div>';const t=e.querySelector(".alert");jQueryMock.fn.alert=Alert.jQueryInterface,jQueryMock.elements=[t],jQueryMock.fn.alert.call(jQueryMock),expect(Alert.getInstance(t)).not.toBeNull(),expect(e.querySelector(".alert")).not.toBeNull()})}),describe("getInstance",()=>{it("should return alert instance",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),r=new Alert(t);expect(Alert.getInstance(t)).toEqual(r),expect(Alert.getInstance(t)).toBeInstanceOf(Alert)}),it("should return null when there is no alert instance",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");expect(Alert.getInstance(t)).toEqual(null)})}),describe("getOrCreateInstance",()=>{it("should return alert instance",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div"),r=new Alert(t);expect(Alert.getOrCreateInstance(t)).toEqual(r),expect(Alert.getInstance(t)).toEqual(Alert.getOrCreateInstance(t,{})),expect(Alert.getOrCreateInstance(t)).toBeInstanceOf(Alert)}),it("should return new instance when there is no alert instance",()=>{e.innerHTML="<div></div>";const t=e.querySelector("div");expect(Alert.getInstance(t)).toEqual(null),expect(Alert.getOrCreateInstance(t)).toBeInstanceOf(Alert)})})});