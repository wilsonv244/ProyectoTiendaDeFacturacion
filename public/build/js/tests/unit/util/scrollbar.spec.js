import{clearBodyAndDocument,clearFixture,getFixture}from"../../helpers/fixture";import Manipulator from"../../../src/dom/manipulator";import ScrollBarHelper from"../../../src/util/scrollbar";describe("ScrollBar",()=>{let e;const t=document.documentElement,o=e=>Number.parseInt(e,10),i=e=>o(window.getComputedStyle(e).paddingRight),l=e=>o(window.getComputedStyle(e).marginRight),d=e=>e.style.overflow,n=e=>Manipulator.getDataAttribute(e,"padding-right"),r=e=>Manipulator.getDataAttribute(e,"margin-right"),s=e=>Manipulator.getDataAttribute(e,"overflow"),a=()=>{const e={htmlClient:document.documentElement.clientWidth,htmlOffset:document.documentElement.offsetWidth,docClient:document.body.clientWidth,htmlBound:document.documentElement.getBoundingClientRect().width,bodyBound:document.body.getBoundingClientRect().width,window:window.innerWidth,width:Math.abs(window.innerWidth-document.documentElement.clientWidth)};return e.htmlClient===e.htmlOffset&&e.htmlClient===e.window};beforeAll(()=>{e=getFixture(),e.removeAttribute("style")}),afterAll(()=>{e.remove()}),afterEach(()=>{clearFixture(),clearBodyAndDocument()}),beforeEach(()=>{clearBodyAndDocument()}),describe("isBodyOverflowing",()=>{it("should return true if body is overflowing",()=>{document.documentElement.style.overflowY="scroll",document.body.style.overflowY="scroll",e.innerHTML=['<div style="height: 110vh; width: 100%"></div>'].join("");const t=(new ScrollBarHelper).isOverflowing();a()?expect(t).toEqual(!1):expect(t).toEqual(!0)}),it("should return false if body is not overflowing",()=>{t.style.overflowY="hidden",document.body.style.overflowY="hidden",e.innerHTML=['<div style="height: 110vh; width: 100%"></div>'].join("");const o=(new ScrollBarHelper).isOverflowing();expect(o).toEqual(!1)})}),describe("getWidth",()=>{it("should return an integer greater than zero, if body is overflowing",()=>{t.style.overflowY="scroll",document.body.style.overflowY="scroll",e.innerHTML=['<div style="height: 110vh; width: 100%"></div>'].join("");const o=(new ScrollBarHelper).getWidth();a()?expect(o).toBe(0):expect(o).toBeGreaterThan(1)}),it("should return 0 if body is not overflowing",()=>{document.documentElement.style.overflowY="hidden",document.body.style.overflowY="hidden",e.innerHTML=['<div style="height: 110vh; width: 100%"></div>'].join("");const t=(new ScrollBarHelper).getWidth();expect(t).toEqual(0)})}),describe("hide - reset",()=>{it("should adjust the inline padding of fixed elements which are full-width",o=>{e.innerHTML=['<div style="height: 110vh; width: 100%"><div class="fixed-top" id="fixed1" style="padding-right: 0px; width: 100vw"></div>','<div class="fixed-top" id="fixed2" style="padding-right: 5px; width: 100vw"></div>',"</div>"].join(""),t.style.overflowY="scroll";const l=e.querySelector("#fixed1"),d=e.querySelector("#fixed2"),r=i(l),s=i(d),a=new ScrollBarHelper,c=r+a.getWidth(),u=s+a.getWidth();a.hide();let h=i(l),p=i(d);expect(n(l)).toEqual(r+"px","original fixed element padding should be stored in data-bs-padding-right"),expect(n(d)).toEqual(s+"px","original fixed element padding should be stored in data-bs-padding-right"),expect(h).toEqual(c,"fixed element padding should be adjusted while opening"),expect(p).toEqual(u,"fixed element padding should be adjusted while opening"),a.reset(),h=i(l),p=i(d),expect(n(l)).toEqual(null,"data-bs-padding-right should be cleared after closing"),expect(n(d)).toEqual(null,"data-bs-padding-right should be cleared after closing"),expect(h).toEqual(r,"fixed element padding should be reset after closing"),expect(p).toEqual(s,"fixed element padding should be reset after closing"),o()}),it("should adjust the inline margin and padding of sticky elements",o=>{e.innerHTML=['<div style="height: 110vh"><div class="sticky-top" style="margin-right: 10px; padding-right: 20px; width: 100vw; height: 10px"></div>',"</div>"].join(""),t.style.overflowY="scroll";const d=e.querySelector(".sticky-top"),s=l(d),a=i(d),c=new ScrollBarHelper,u=s-c.getWidth(),h=a+c.getWidth();c.hide(),expect(r(d)).toEqual(s+"px","original sticky element margin should be stored in data-bs-margin-right"),expect(l(d)).toEqual(u,"sticky element margin should be adjusted while opening"),expect(n(d)).toEqual(a+"px","original sticky element margin should be stored in data-bs-margin-right"),expect(i(d)).toEqual(h,"sticky element margin should be adjusted while opening"),c.reset(),expect(r(d)).toEqual(null,"data-bs-margin-right should be cleared after closing"),expect(l(d)).toEqual(s,"sticky element margin should be reset after closing"),expect(n(d)).toEqual(null,"data-bs-margin-right should be cleared after closing"),expect(i(d)).toEqual(a,"sticky element margin should be reset after closing"),o()}),it("should not adjust the inline margin and padding of sticky and fixed elements when element do not have full width",()=>{e.innerHTML=['<div class="sticky-top" style="margin-right: 0px; padding-right: 0px; width: 50vw"></div>'].join("");const t=e.querySelector(".sticky-top"),o=l(t),d=i(t),n=new ScrollBarHelper;n.hide();const r=l(t),s=i(t);expect(r).toEqual(o,"sticky element's margin should not be adjusted while opening"),expect(s).toEqual(d,"sticky element's padding should not be adjusted while opening"),n.reset()}),it("should not put data-attribute if element doesn't have the proper style property, should just remove style property if element didn't had one",()=>{e.innerHTML=['<div style="height: 110vh; width: 100%"><div class="sticky-top" id="sticky" style="width: 100vw"></div>',"</div>"].join(""),document.body.style.overflowY="scroll";const t=new ScrollBarHelper,o=e.querySelector("#sticky"),d=i(o),n=l(o),r=t.getWidth();t.hide(),expect(i(o)).toEqual(r+d);const s=r+n;var a;expect(l(o)).toEqual(0===s?s:-s),expect((a=o,a.hasAttribute("data-bs-margin-right"))).toBeFalse(),expect((e=>e.hasAttribute("data-bs-padding-right"))(o)).toBeFalse(),t.reset(),expect(i(o)).toEqual(d),expect(i(o)).toEqual(d)}),describe("Body Handling",()=>{it("should ignore other inline styles when trying to restore body defaults ",()=>{document.body.style.color="red";const e=new ScrollBarHelper,t=e.getWidth();e.hide(),expect(i(document.body)).toEqual(t,"body does not have inline padding set"),expect(document.body.style.color).toEqual("red","body still has other inline styles set"),e.reset()}),it("should hide scrollbar and reset it to its initial value",()=>{e.innerHTML=["<style>","  body {","       padding-right: 7px }","  }","</style>"].join("");const t=document.body;t.style.paddingRight="10px";const l=i(t);expect(l).toEqual(o("10px"));t.style.overflow="auto";const r=new ScrollBarHelper,a=r.getWidth();r.hide();const c=i(t);expect(c).toEqual(a+l),expect(c).toEqual(a+o("10px")),expect(n(t)).toEqual("10px"),expect(d(t)).toEqual("hidden"),expect(s(t)).toEqual("auto"),r.reset();const u=i(t);expect(u).toEqual(l),expect(n(t)).toEqual(null),expect(d(t)).toEqual("auto"),expect(s(t)).toEqual(null)}),it("should hide scrollbar and reset it to its initial value - respecting css rules",()=>{e.innerHTML=["<style>","  body {","       padding-right: 7px }","  }","</style>"].join("");const t=document.body,l=i(t);t.style.overflow="scroll";const r=new ScrollBarHelper,a=r.getWidth();r.hide();const c=i(t);expect(c).toEqual(a+l),expect(c).toEqual(a+o("7px")),expect(n(t)).toBeNull(),expect(d(t)).toEqual("hidden"),expect(s(t)).toEqual("scroll"),r.reset();const u=i(t);expect(u).toEqual(l),expect(n(t)).toEqual(null),expect(d(t)).toEqual("scroll"),expect(s(t)).toEqual(null)}),it("should not adjust the inline body padding when it does not overflow",()=>{const e=i(document.body),o=new ScrollBarHelper;t.style.overflowY="hidden",t.style.paddingRight="0px",o.hide();const l=i(document.body);expect(l).toEqual(e,"body padding should not be adjusted"),o.reset()}),it("should not adjust the inline body padding when it does not overflow, even on a scaled display",()=>{const e=i(document.body),o=new ScrollBarHelper;document.body.style.margin="0",t.style.overflowY="hidden",t.style.paddingRight=".48px",o.hide();const l=i(document.body);expect(l).toEqual(e,"body padding should not be adjusted"),o.reset()})})})});