import{DefaultAllowlist,sanitizeHtml}from"../../../src/util/sanitizer";describe("Sanitizer",()=>{describe("sanitizeHtml",()=>{it("should return the same on empty string",()=>{const t=sanitizeHtml("",DefaultAllowlist,null);expect(t).toEqual("")}),it("should sanitize template by removing tags with XSS",()=>{const t=["<div>",'  <a href="javascript:alert(7)">Click me</a>',"  <span>Some content</span>","</div>"].join(""),e=sanitizeHtml(t,DefaultAllowlist,null);expect(e).not.toContain('href="javascript:alert(7)')}),it("should allow aria attributes and safe attributes",()=>{const t=['<div aria-pressed="true">','  <span class="test">Some content</span>',"</div>"].join(""),e=sanitizeHtml(t,DefaultAllowlist,null);expect(e).toContain("aria-pressed"),expect(e).toContain('class="test"')}),it("should remove tags not in allowlist",()=>{const t=["<div>","  <script>alert(7)<\/script>","</div>"].join(""),e=sanitizeHtml(t,DefaultAllowlist,null);expect(e).not.toContain("<script>")}),it("should not use native api to sanitize if a custom function passed",()=>{const t=["<div>","  <span>Some content</span>","</div>"].join("");spyOn(DOMParser.prototype,"parseFromString");const e=sanitizeHtml(t,DefaultAllowlist,(function(t){return t}));expect(e).toEqual(t),expect(DOMParser.prototype.parseFromString).not.toHaveBeenCalled()}),it("should allow multiple sanitation passes of the same template",()=>{const t=sanitizeHtml('<img src="test.jpg">',DefaultAllowlist,null),e=sanitizeHtml('<img src="test.jpg">',DefaultAllowlist,null);expect(t).toContain("src"),expect(e).toContain("src")})})});